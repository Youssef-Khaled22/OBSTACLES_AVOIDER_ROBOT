
ES-(QLearning).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  000018a2  00001936  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000096  008000ea  008000ea  000019c0  2**0
                  ALLOC
  3 .stab         00002448  00000000  00000000  000019c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007ca  00000000  00000000  00003e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000218  00000000  00000000  000045d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001933  00000000  00000000  000047f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000982  00000000  00000000  00006123  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fe5  00000000  00000000  00006aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000058c  00000000  00000000  00007a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047d  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012c1  00000000  00000000  00008495  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00009756  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 19 03 	call	0x632	; 0x632 <main>
      8a:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vDisable_internal_Pull_up>:
#include <avr/io.h>
#include "std_macro.h"

void DIO_vDisable_internal_Pull_up()
{
	SET_BIT(SFIOR,2);
      92:	80 b7       	in	r24, 0x30	; 48
      94:	84 60       	ori	r24, 0x04	; 4
      96:	80 bf       	out	0x30, r24	; 48
}
      98:	08 95       	ret

0000009a <DIO_vsetPINDir>:
void DIO_vsetPINDir(char portname,char pin,char direction)
{ 
	switch (portname)
      9a:	84 34       	cpi	r24, 0x44	; 68
      9c:	09 f4       	brne	.+2      	; 0xa0 <DIO_vsetPINDir+0x6>
      9e:	71 c0       	rjmp	.+226    	; 0x182 <DIO_vsetPINDir+0xe8>
      a0:	85 34       	cpi	r24, 0x45	; 69
      a2:	48 f4       	brcc	.+18     	; 0xb6 <DIO_vsetPINDir+0x1c>
      a4:	82 34       	cpi	r24, 0x42	; 66
      a6:	99 f1       	breq	.+102    	; 0x10e <DIO_vsetPINDir+0x74>
      a8:	83 34       	cpi	r24, 0x43	; 67
      aa:	08 f0       	brcs	.+2      	; 0xae <DIO_vsetPINDir+0x14>
      ac:	4d c0       	rjmp	.+154    	; 0x148 <DIO_vsetPINDir+0xae>
      ae:	81 34       	cpi	r24, 0x41	; 65
      b0:	09 f0       	breq	.+2      	; 0xb4 <DIO_vsetPINDir+0x1a>
      b2:	83 c0       	rjmp	.+262    	; 0x1ba <DIO_vsetPINDir+0x120>
      b4:	0f c0       	rjmp	.+30     	; 0xd4 <DIO_vsetPINDir+0x3a>
      b6:	82 36       	cpi	r24, 0x62	; 98
      b8:	51 f1       	breq	.+84     	; 0x10e <DIO_vsetPINDir+0x74>
      ba:	83 36       	cpi	r24, 0x63	; 99
      bc:	20 f4       	brcc	.+8      	; 0xc6 <DIO_vsetPINDir+0x2c>
      be:	81 36       	cpi	r24, 0x61	; 97
      c0:	09 f0       	breq	.+2      	; 0xc4 <DIO_vsetPINDir+0x2a>
      c2:	7b c0       	rjmp	.+246    	; 0x1ba <DIO_vsetPINDir+0x120>
      c4:	07 c0       	rjmp	.+14     	; 0xd4 <DIO_vsetPINDir+0x3a>
      c6:	83 36       	cpi	r24, 0x63	; 99
      c8:	09 f4       	brne	.+2      	; 0xcc <DIO_vsetPINDir+0x32>
      ca:	3e c0       	rjmp	.+124    	; 0x148 <DIO_vsetPINDir+0xae>
      cc:	84 36       	cpi	r24, 0x64	; 100
      ce:	09 f0       	breq	.+2      	; 0xd2 <DIO_vsetPINDir+0x38>
      d0:	74 c0       	rjmp	.+232    	; 0x1ba <DIO_vsetPINDir+0x120>
      d2:	57 c0       	rjmp	.+174    	; 0x182 <DIO_vsetPINDir+0xe8>
	{
		case 'A':
		case 'a':
			if(direction==1)
      d4:	41 30       	cpi	r20, 0x01	; 1
      d6:	69 f4       	brne	.+26     	; 0xf2 <DIO_vsetPINDir+0x58>
			{
				SET_BIT(DDRA,pin);
      d8:	2a b3       	in	r18, 0x1a	; 26
      da:	81 e0       	ldi	r24, 0x01	; 1
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	ac 01       	movw	r20, r24
      e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_vsetPINDir+0x4c>
      e2:	44 0f       	add	r20, r20
      e4:	55 1f       	adc	r21, r21
      e6:	6a 95       	dec	r22
      e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_vsetPINDir+0x48>
      ea:	ba 01       	movw	r22, r20
      ec:	62 2b       	or	r22, r18
      ee:	6a bb       	out	0x1a, r22	; 26
      f0:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRA,pin);
      f2:	2a b3       	in	r18, 0x1a	; 26
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	ac 01       	movw	r20, r24
      fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_vsetPINDir+0x66>
      fc:	44 0f       	add	r20, r20
      fe:	55 1f       	adc	r21, r21
     100:	6a 95       	dec	r22
     102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_vsetPINDir+0x62>
     104:	ba 01       	movw	r22, r20
     106:	60 95       	com	r22
     108:	62 23       	and	r22, r18
     10a:	6a bb       	out	0x1a, r22	; 26
     10c:	08 95       	ret
			}
		break;
		case 'B':
		case 'b':
		if(direction==1)
     10e:	41 30       	cpi	r20, 0x01	; 1
     110:	69 f4       	brne	.+26     	; 0x12c <DIO_vsetPINDir+0x92>
		{
			SET_BIT(DDRB,pin);
     112:	27 b3       	in	r18, 0x17	; 23
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	ac 01       	movw	r20, r24
     11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_vsetPINDir+0x86>
     11c:	44 0f       	add	r20, r20
     11e:	55 1f       	adc	r21, r21
     120:	6a 95       	dec	r22
     122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_vsetPINDir+0x82>
     124:	ba 01       	movw	r22, r20
     126:	62 2b       	or	r22, r18
     128:	67 bb       	out	0x17, r22	; 23
     12a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pin);
     12c:	27 b3       	in	r18, 0x17	; 23
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	ac 01       	movw	r20, r24
     134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_vsetPINDir+0xa0>
     136:	44 0f       	add	r20, r20
     138:	55 1f       	adc	r21, r21
     13a:	6a 95       	dec	r22
     13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_vsetPINDir+0x9c>
     13e:	ba 01       	movw	r22, r20
     140:	60 95       	com	r22
     142:	62 23       	and	r22, r18
     144:	67 bb       	out	0x17, r22	; 23
     146:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(direction==1)
     148:	41 30       	cpi	r20, 0x01	; 1
     14a:	69 f4       	brne	.+26     	; 0x166 <DIO_vsetPINDir+0xcc>
		{
			SET_BIT(DDRC,pin);
     14c:	24 b3       	in	r18, 0x14	; 20
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	ac 01       	movw	r20, r24
     154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_vsetPINDir+0xc0>
     156:	44 0f       	add	r20, r20
     158:	55 1f       	adc	r21, r21
     15a:	6a 95       	dec	r22
     15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_vsetPINDir+0xbc>
     15e:	ba 01       	movw	r22, r20
     160:	62 2b       	or	r22, r18
     162:	64 bb       	out	0x14, r22	; 20
     164:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pin);
     166:	24 b3       	in	r18, 0x14	; 20
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	ac 01       	movw	r20, r24
     16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_vsetPINDir+0xda>
     170:	44 0f       	add	r20, r20
     172:	55 1f       	adc	r21, r21
     174:	6a 95       	dec	r22
     176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_vsetPINDir+0xd6>
     178:	ba 01       	movw	r22, r20
     17a:	60 95       	com	r22
     17c:	62 23       	and	r22, r18
     17e:	64 bb       	out	0x14, r22	; 20
     180:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(direction==1)
     182:	41 30       	cpi	r20, 0x01	; 1
     184:	69 f4       	brne	.+26     	; 0x1a0 <DIO_vsetPINDir+0x106>
		{
			SET_BIT(DDRD,pin);
     186:	21 b3       	in	r18, 0x11	; 17
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	ac 01       	movw	r20, r24
     18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_vsetPINDir+0xfa>
     190:	44 0f       	add	r20, r20
     192:	55 1f       	adc	r21, r21
     194:	6a 95       	dec	r22
     196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_vsetPINDir+0xf6>
     198:	ba 01       	movw	r22, r20
     19a:	62 2b       	or	r22, r18
     19c:	61 bb       	out	0x11, r22	; 17
     19e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pin);
     1a0:	21 b3       	in	r18, 0x11	; 17
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	ac 01       	movw	r20, r24
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_vsetPINDir+0x114>
     1aa:	44 0f       	add	r20, r20
     1ac:	55 1f       	adc	r21, r21
     1ae:	6a 95       	dec	r22
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_vsetPINDir+0x110>
     1b2:	ba 01       	movw	r22, r20
     1b4:	60 95       	com	r22
     1b6:	62 23       	and	r22, r18
     1b8:	61 bb       	out	0x11, r22	; 17
     1ba:	08 95       	ret

000001bc <DIO_write_pin>:
}

void DIO_write_pin(char portname,char pin,char value)
{
	
	switch (portname)
     1bc:	84 34       	cpi	r24, 0x44	; 68
     1be:	09 f4       	brne	.+2      	; 0x1c2 <DIO_write_pin+0x6>
     1c0:	71 c0       	rjmp	.+226    	; 0x2a4 <DIO_write_pin+0xe8>
     1c2:	85 34       	cpi	r24, 0x45	; 69
     1c4:	48 f4       	brcc	.+18     	; 0x1d8 <DIO_write_pin+0x1c>
     1c6:	82 34       	cpi	r24, 0x42	; 66
     1c8:	99 f1       	breq	.+102    	; 0x230 <DIO_write_pin+0x74>
     1ca:	83 34       	cpi	r24, 0x43	; 67
     1cc:	08 f0       	brcs	.+2      	; 0x1d0 <DIO_write_pin+0x14>
     1ce:	4d c0       	rjmp	.+154    	; 0x26a <DIO_write_pin+0xae>
     1d0:	81 34       	cpi	r24, 0x41	; 65
     1d2:	09 f0       	breq	.+2      	; 0x1d6 <DIO_write_pin+0x1a>
     1d4:	83 c0       	rjmp	.+262    	; 0x2dc <DIO_write_pin+0x120>
     1d6:	0f c0       	rjmp	.+30     	; 0x1f6 <DIO_write_pin+0x3a>
     1d8:	82 36       	cpi	r24, 0x62	; 98
     1da:	51 f1       	breq	.+84     	; 0x230 <DIO_write_pin+0x74>
     1dc:	83 36       	cpi	r24, 0x63	; 99
     1de:	20 f4       	brcc	.+8      	; 0x1e8 <DIO_write_pin+0x2c>
     1e0:	81 36       	cpi	r24, 0x61	; 97
     1e2:	09 f0       	breq	.+2      	; 0x1e6 <DIO_write_pin+0x2a>
     1e4:	7b c0       	rjmp	.+246    	; 0x2dc <DIO_write_pin+0x120>
     1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <DIO_write_pin+0x3a>
     1e8:	83 36       	cpi	r24, 0x63	; 99
     1ea:	09 f4       	brne	.+2      	; 0x1ee <DIO_write_pin+0x32>
     1ec:	3e c0       	rjmp	.+124    	; 0x26a <DIO_write_pin+0xae>
     1ee:	84 36       	cpi	r24, 0x64	; 100
     1f0:	09 f0       	breq	.+2      	; 0x1f4 <DIO_write_pin+0x38>
     1f2:	74 c0       	rjmp	.+232    	; 0x2dc <DIO_write_pin+0x120>
     1f4:	57 c0       	rjmp	.+174    	; 0x2a4 <DIO_write_pin+0xe8>
	{
		
		case 'A':
		case 'a':
		if(value==1)
     1f6:	41 30       	cpi	r20, 0x01	; 1
     1f8:	69 f4       	brne	.+26     	; 0x214 <DIO_write_pin+0x58>
		{
			SET_BIT(PORTA,pin);
     1fa:	2b b3       	in	r18, 0x1b	; 27
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	ac 01       	movw	r20, r24
     202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_write_pin+0x4c>
     204:	44 0f       	add	r20, r20
     206:	55 1f       	adc	r21, r21
     208:	6a 95       	dec	r22
     20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_write_pin+0x48>
     20c:	ba 01       	movw	r22, r20
     20e:	62 2b       	or	r22, r18
     210:	6b bb       	out	0x1b, r22	; 27
     212:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
     214:	2b b3       	in	r18, 0x1b	; 27
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	ac 01       	movw	r20, r24
     21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_write_pin+0x66>
     21e:	44 0f       	add	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_write_pin+0x62>
     226:	ba 01       	movw	r22, r20
     228:	60 95       	com	r22
     22a:	62 23       	and	r22, r18
     22c:	6b bb       	out	0x1b, r22	; 27
     22e:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(value==1)
     230:	41 30       	cpi	r20, 0x01	; 1
     232:	69 f4       	brne	.+26     	; 0x24e <DIO_write_pin+0x92>
		{
			SET_BIT(PORTB,pin);
     234:	28 b3       	in	r18, 0x18	; 24
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	ac 01       	movw	r20, r24
     23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_write_pin+0x86>
     23e:	44 0f       	add	r20, r20
     240:	55 1f       	adc	r21, r21
     242:	6a 95       	dec	r22
     244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_write_pin+0x82>
     246:	ba 01       	movw	r22, r20
     248:	62 2b       	or	r22, r18
     24a:	68 bb       	out	0x18, r22	; 24
     24c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
     24e:	28 b3       	in	r18, 0x18	; 24
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	ac 01       	movw	r20, r24
     256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_write_pin+0xa0>
     258:	44 0f       	add	r20, r20
     25a:	55 1f       	adc	r21, r21
     25c:	6a 95       	dec	r22
     25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_write_pin+0x9c>
     260:	ba 01       	movw	r22, r20
     262:	60 95       	com	r22
     264:	62 23       	and	r22, r18
     266:	68 bb       	out	0x18, r22	; 24
     268:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(value==1)
     26a:	41 30       	cpi	r20, 0x01	; 1
     26c:	69 f4       	brne	.+26     	; 0x288 <DIO_write_pin+0xcc>
		{
			SET_BIT(PORTC,pin);
     26e:	25 b3       	in	r18, 0x15	; 21
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	ac 01       	movw	r20, r24
     276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_write_pin+0xc0>
     278:	44 0f       	add	r20, r20
     27a:	55 1f       	adc	r21, r21
     27c:	6a 95       	dec	r22
     27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_write_pin+0xbc>
     280:	ba 01       	movw	r22, r20
     282:	62 2b       	or	r22, r18
     284:	65 bb       	out	0x15, r22	; 21
     286:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
     288:	25 b3       	in	r18, 0x15	; 21
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	ac 01       	movw	r20, r24
     290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_write_pin+0xda>
     292:	44 0f       	add	r20, r20
     294:	55 1f       	adc	r21, r21
     296:	6a 95       	dec	r22
     298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_write_pin+0xd6>
     29a:	ba 01       	movw	r22, r20
     29c:	60 95       	com	r22
     29e:	62 23       	and	r22, r18
     2a0:	65 bb       	out	0x15, r22	; 21
     2a2:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(value==1)
     2a4:	41 30       	cpi	r20, 0x01	; 1
     2a6:	69 f4       	brne	.+26     	; 0x2c2 <DIO_write_pin+0x106>
		{
			SET_BIT(PORTD,pin);
     2a8:	22 b3       	in	r18, 0x12	; 18
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	ac 01       	movw	r20, r24
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_write_pin+0xfa>
     2b2:	44 0f       	add	r20, r20
     2b4:	55 1f       	adc	r21, r21
     2b6:	6a 95       	dec	r22
     2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_write_pin+0xf6>
     2ba:	ba 01       	movw	r22, r20
     2bc:	62 2b       	or	r22, r18
     2be:	62 bb       	out	0x12, r22	; 18
     2c0:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
     2c2:	22 b3       	in	r18, 0x12	; 18
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	ac 01       	movw	r20, r24
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_write_pin+0x114>
     2cc:	44 0f       	add	r20, r20
     2ce:	55 1f       	adc	r21, r21
     2d0:	6a 95       	dec	r22
     2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_write_pin+0x110>
     2d4:	ba 01       	movw	r22, r20
     2d6:	60 95       	com	r22
     2d8:	62 23       	and	r22, r18
     2da:	62 bb       	out	0x12, r22	; 18
     2dc:	08 95       	ret

000002de <DIO_u8read>:
	}
}
unsigned char DIO_u8read(char portname,char pinnumber)
{
	unsigned char value;
	switch(portname)
     2de:	84 34       	cpi	r24, 0x44	; 68
     2e0:	09 f4       	brne	.+2      	; 0x2e4 <DIO_u8read+0x6>
     2e2:	51 c0       	rjmp	.+162    	; 0x386 <DIO_u8read+0xa8>
     2e4:	85 34       	cpi	r24, 0x45	; 69
     2e6:	40 f4       	brcc	.+16     	; 0x2f8 <DIO_u8read+0x1a>
     2e8:	82 34       	cpi	r24, 0x42	; 66
     2ea:	39 f1       	breq	.+78     	; 0x33a <DIO_u8read+0x5c>
     2ec:	83 34       	cpi	r24, 0x43	; 67
     2ee:	c0 f5       	brcc	.+112    	; 0x360 <DIO_u8read+0x82>
     2f0:	81 34       	cpi	r24, 0x41	; 65
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <DIO_u8read+0x18>
     2f4:	5a c0       	rjmp	.+180    	; 0x3aa <DIO_u8read+0xcc>
     2f6:	0e c0       	rjmp	.+28     	; 0x314 <DIO_u8read+0x36>
     2f8:	82 36       	cpi	r24, 0x62	; 98
     2fa:	f9 f0       	breq	.+62     	; 0x33a <DIO_u8read+0x5c>
     2fc:	83 36       	cpi	r24, 0x63	; 99
     2fe:	20 f4       	brcc	.+8      	; 0x308 <DIO_u8read+0x2a>
     300:	81 36       	cpi	r24, 0x61	; 97
     302:	09 f0       	breq	.+2      	; 0x306 <DIO_u8read+0x28>
     304:	52 c0       	rjmp	.+164    	; 0x3aa <DIO_u8read+0xcc>
     306:	06 c0       	rjmp	.+12     	; 0x314 <DIO_u8read+0x36>
     308:	83 36       	cpi	r24, 0x63	; 99
     30a:	51 f1       	breq	.+84     	; 0x360 <DIO_u8read+0x82>
     30c:	84 36       	cpi	r24, 0x64	; 100
     30e:	09 f0       	breq	.+2      	; 0x312 <DIO_u8read+0x34>
     310:	4c c0       	rjmp	.+152    	; 0x3aa <DIO_u8read+0xcc>
     312:	39 c0       	rjmp	.+114    	; 0x386 <DIO_u8read+0xa8>
	{
		case 'A':
		case 'a':
		value=READ_BIT(PINA,pinnumber);
     314:	29 b3       	in	r18, 0x19	; 25
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	06 2e       	mov	r0, r22
     31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_u8read+0x44>
     31e:	88 0f       	add	r24, r24
     320:	99 1f       	adc	r25, r25
     322:	0a 94       	dec	r0
     324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_u8read+0x40>
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	82 23       	and	r24, r18
     32a:	93 23       	and	r25, r19
     32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_u8read+0x54>
     32e:	95 95       	asr	r25
     330:	87 95       	ror	r24
     332:	6a 95       	dec	r22
     334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_u8read+0x50>
     336:	98 2f       	mov	r25, r24
		break;
     338:	38 c0       	rjmp	.+112    	; 0x3aa <DIO_u8read+0xcc>
		
		case 'B':
		case 'b':
		value=READ_BIT(PINB,pinnumber);
     33a:	26 b3       	in	r18, 0x16	; 22
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	06 2e       	mov	r0, r22
     342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_u8read+0x6a>
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	0a 94       	dec	r0
     34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_u8read+0x66>
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	82 23       	and	r24, r18
     350:	93 23       	and	r25, r19
     352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_u8read+0x7a>
     354:	95 95       	asr	r25
     356:	87 95       	ror	r24
     358:	6a 95       	dec	r22
     35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_u8read+0x76>
     35c:	98 2f       	mov	r25, r24
		break;
     35e:	25 c0       	rjmp	.+74     	; 0x3aa <DIO_u8read+0xcc>
		
		case 'C':
		case 'c':
		value=READ_BIT(PINC,pinnumber);
     360:	23 b3       	in	r18, 0x13	; 19
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	06 2e       	mov	r0, r22
     368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_u8read+0x90>
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	0a 94       	dec	r0
     370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_u8read+0x8c>
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	82 23       	and	r24, r18
     376:	93 23       	and	r25, r19
     378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_u8read+0xa0>
     37a:	95 95       	asr	r25
     37c:	87 95       	ror	r24
     37e:	6a 95       	dec	r22
     380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_u8read+0x9c>
     382:	98 2f       	mov	r25, r24
		break;
     384:	12 c0       	rjmp	.+36     	; 0x3aa <DIO_u8read+0xcc>
		
		case 'D':
		case 'd':
		value=READ_BIT(PIND,pinnumber);
     386:	20 b3       	in	r18, 0x10	; 16
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	06 2e       	mov	r0, r22
     38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_u8read+0xb6>
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	0a 94       	dec	r0
     396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_u8read+0xb2>
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	82 23       	and	r24, r18
     39c:	93 23       	and	r25, r19
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_u8read+0xc6>
     3a0:	95 95       	asr	r25
     3a2:	87 95       	ror	r24
     3a4:	6a 95       	dec	r22
     3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_u8read+0xc2>
     3a8:	98 2f       	mov	r25, r24
		break;
	}
	return value;
}
     3aa:	89 2f       	mov	r24, r25
     3ac:	08 95       	ret

000003ae <DIO_toggle_pin>:
void DIO_toggle_pin(unsigned char portname,unsigned char pinnumber)
{
	switch (portname)
     3ae:	84 34       	cpi	r24, 0x44	; 68
     3b0:	09 f4       	brne	.+2      	; 0x3b4 <DIO_toggle_pin+0x6>
     3b2:	3d c0       	rjmp	.+122    	; 0x42e <DIO_toggle_pin+0x80>
     3b4:	85 34       	cpi	r24, 0x45	; 69
     3b6:	40 f4       	brcc	.+16     	; 0x3c8 <DIO_toggle_pin+0x1a>
     3b8:	82 34       	cpi	r24, 0x42	; 66
     3ba:	f9 f0       	breq	.+62     	; 0x3fa <DIO_toggle_pin+0x4c>
     3bc:	83 34       	cpi	r24, 0x43	; 67
     3be:	50 f5       	brcc	.+84     	; 0x414 <DIO_toggle_pin+0x66>
     3c0:	81 34       	cpi	r24, 0x41	; 65
     3c2:	09 f0       	breq	.+2      	; 0x3c6 <DIO_toggle_pin+0x18>
     3c4:	40 c0       	rjmp	.+128    	; 0x446 <DIO_toggle_pin+0x98>
     3c6:	0c c0       	rjmp	.+24     	; 0x3e0 <DIO_toggle_pin+0x32>
     3c8:	82 36       	cpi	r24, 0x62	; 98
     3ca:	b9 f0       	breq	.+46     	; 0x3fa <DIO_toggle_pin+0x4c>
     3cc:	83 36       	cpi	r24, 0x63	; 99
     3ce:	18 f4       	brcc	.+6      	; 0x3d6 <DIO_toggle_pin+0x28>
     3d0:	81 36       	cpi	r24, 0x61	; 97
     3d2:	c9 f5       	brne	.+114    	; 0x446 <DIO_toggle_pin+0x98>
     3d4:	05 c0       	rjmp	.+10     	; 0x3e0 <DIO_toggle_pin+0x32>
     3d6:	83 36       	cpi	r24, 0x63	; 99
     3d8:	e9 f0       	breq	.+58     	; 0x414 <DIO_toggle_pin+0x66>
     3da:	84 36       	cpi	r24, 0x64	; 100
     3dc:	a1 f5       	brne	.+104    	; 0x446 <DIO_toggle_pin+0x98>
     3de:	27 c0       	rjmp	.+78     	; 0x42e <DIO_toggle_pin+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pinnumber);
     3e0:	2b b3       	in	r18, 0x1b	; 27
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	ac 01       	movw	r20, r24
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_toggle_pin+0x40>
     3ea:	44 0f       	add	r20, r20
     3ec:	55 1f       	adc	r21, r21
     3ee:	6a 95       	dec	r22
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_toggle_pin+0x3c>
     3f2:	ba 01       	movw	r22, r20
     3f4:	62 27       	eor	r22, r18
     3f6:	6b bb       	out	0x1b, r22	; 27
		break;
     3f8:	08 95       	ret
		
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pinnumber);
     3fa:	28 b3       	in	r18, 0x18	; 24
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	ac 01       	movw	r20, r24
     402:	02 c0       	rjmp	.+4      	; 0x408 <DIO_toggle_pin+0x5a>
     404:	44 0f       	add	r20, r20
     406:	55 1f       	adc	r21, r21
     408:	6a 95       	dec	r22
     40a:	e2 f7       	brpl	.-8      	; 0x404 <DIO_toggle_pin+0x56>
     40c:	ba 01       	movw	r22, r20
     40e:	62 27       	eor	r22, r18
     410:	68 bb       	out	0x18, r22	; 24
		break;
     412:	08 95       	ret
		
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pinnumber);
     414:	25 b3       	in	r18, 0x15	; 21
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	ac 01       	movw	r20, r24
     41c:	02 c0       	rjmp	.+4      	; 0x422 <DIO_toggle_pin+0x74>
     41e:	44 0f       	add	r20, r20
     420:	55 1f       	adc	r21, r21
     422:	6a 95       	dec	r22
     424:	e2 f7       	brpl	.-8      	; 0x41e <DIO_toggle_pin+0x70>
     426:	ba 01       	movw	r22, r20
     428:	62 27       	eor	r22, r18
     42a:	65 bb       	out	0x15, r22	; 21
		break;
     42c:	08 95       	ret
		
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pinnumber);
     42e:	22 b3       	in	r18, 0x12	; 18
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	ac 01       	movw	r20, r24
     436:	02 c0       	rjmp	.+4      	; 0x43c <DIO_toggle_pin+0x8e>
     438:	44 0f       	add	r20, r20
     43a:	55 1f       	adc	r21, r21
     43c:	6a 95       	dec	r22
     43e:	e2 f7       	brpl	.-8      	; 0x438 <DIO_toggle_pin+0x8a>
     440:	ba 01       	movw	r22, r20
     442:	62 27       	eor	r22, r18
     444:	62 bb       	out	0x12, r22	; 18
     446:	08 95       	ret

00000448 <DIO_set_port_direction>:
		break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch (portname)
     448:	84 34       	cpi	r24, 0x44	; 68
     44a:	d9 f0       	breq	.+54     	; 0x482 <DIO_set_port_direction+0x3a>
     44c:	85 34       	cpi	r24, 0x45	; 69
     44e:	38 f4       	brcc	.+14     	; 0x45e <DIO_set_port_direction+0x16>
     450:	82 34       	cpi	r24, 0x42	; 66
     452:	99 f0       	breq	.+38     	; 0x47a <DIO_set_port_direction+0x32>
     454:	83 34       	cpi	r24, 0x43	; 67
     456:	98 f4       	brcc	.+38     	; 0x47e <DIO_set_port_direction+0x36>
     458:	81 34       	cpi	r24, 0x41	; 65
     45a:	a1 f4       	brne	.+40     	; 0x484 <DIO_set_port_direction+0x3c>
     45c:	0c c0       	rjmp	.+24     	; 0x476 <DIO_set_port_direction+0x2e>
     45e:	82 36       	cpi	r24, 0x62	; 98
     460:	61 f0       	breq	.+24     	; 0x47a <DIO_set_port_direction+0x32>
     462:	83 36       	cpi	r24, 0x63	; 99
     464:	18 f4       	brcc	.+6      	; 0x46c <DIO_set_port_direction+0x24>
     466:	81 36       	cpi	r24, 0x61	; 97
     468:	69 f4       	brne	.+26     	; 0x484 <DIO_set_port_direction+0x3c>
     46a:	05 c0       	rjmp	.+10     	; 0x476 <DIO_set_port_direction+0x2e>
     46c:	83 36       	cpi	r24, 0x63	; 99
     46e:	39 f0       	breq	.+14     	; 0x47e <DIO_set_port_direction+0x36>
     470:	84 36       	cpi	r24, 0x64	; 100
     472:	41 f4       	brne	.+16     	; 0x484 <DIO_set_port_direction+0x3c>
     474:	06 c0       	rjmp	.+12     	; 0x482 <DIO_set_port_direction+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=direction;
     476:	6a bb       	out	0x1a, r22	; 26
		break;
     478:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=direction;
     47a:	67 bb       	out	0x17, r22	; 23
		break;
     47c:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=direction;
     47e:	64 bb       	out	0x14, r22	; 20
		break;
     480:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=direction;
     482:	61 bb       	out	0x11, r22	; 17
     484:	08 95       	ret

00000486 <DIO_write_port>:
		break;
	}		
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
     486:	84 34       	cpi	r24, 0x44	; 68
     488:	d9 f0       	breq	.+54     	; 0x4c0 <DIO_write_port+0x3a>
     48a:	85 34       	cpi	r24, 0x45	; 69
     48c:	38 f4       	brcc	.+14     	; 0x49c <DIO_write_port+0x16>
     48e:	82 34       	cpi	r24, 0x42	; 66
     490:	99 f0       	breq	.+38     	; 0x4b8 <DIO_write_port+0x32>
     492:	83 34       	cpi	r24, 0x43	; 67
     494:	98 f4       	brcc	.+38     	; 0x4bc <DIO_write_port+0x36>
     496:	81 34       	cpi	r24, 0x41	; 65
     498:	a1 f4       	brne	.+40     	; 0x4c2 <DIO_write_port+0x3c>
     49a:	0c c0       	rjmp	.+24     	; 0x4b4 <DIO_write_port+0x2e>
     49c:	82 36       	cpi	r24, 0x62	; 98
     49e:	61 f0       	breq	.+24     	; 0x4b8 <DIO_write_port+0x32>
     4a0:	83 36       	cpi	r24, 0x63	; 99
     4a2:	18 f4       	brcc	.+6      	; 0x4aa <DIO_write_port+0x24>
     4a4:	81 36       	cpi	r24, 0x61	; 97
     4a6:	69 f4       	brne	.+26     	; 0x4c2 <DIO_write_port+0x3c>
     4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <DIO_write_port+0x2e>
     4aa:	83 36       	cpi	r24, 0x63	; 99
     4ac:	39 f0       	breq	.+14     	; 0x4bc <DIO_write_port+0x36>
     4ae:	84 36       	cpi	r24, 0x64	; 100
     4b0:	41 f4       	brne	.+16     	; 0x4c2 <DIO_write_port+0x3c>
     4b2:	06 c0       	rjmp	.+12     	; 0x4c0 <DIO_write_port+0x3a>
	{
		case 'A' :
		case 'a':
		PORTA=portvalue; //Write the given value to the port A
     4b4:	6b bb       	out	0x1b, r22	; 27
		break ;
     4b6:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=portvalue; //Write the given value to the port B
     4b8:	68 bb       	out	0x18, r22	; 24
		break ;
     4ba:	08 95       	ret
		case 'C' :
		case 'c':
		PORTC=portvalue; //Write the given value to the port C
     4bc:	65 bb       	out	0x15, r22	; 21
		break ;
     4be:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=portvalue; //Write the given value to the port D
     4c0:	62 bb       	out	0x12, r22	; 18
     4c2:	08 95       	ret

000004c4 <DIO_read_port>:
	}
}
unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
     4c4:	84 34       	cpi	r24, 0x44	; 68
     4c6:	d9 f0       	breq	.+54     	; 0x4fe <DIO_read_port+0x3a>
     4c8:	85 34       	cpi	r24, 0x45	; 69
     4ca:	38 f4       	brcc	.+14     	; 0x4da <DIO_read_port+0x16>
     4cc:	82 34       	cpi	r24, 0x42	; 66
     4ce:	99 f0       	breq	.+38     	; 0x4f6 <DIO_read_port+0x32>
     4d0:	83 34       	cpi	r24, 0x43	; 67
     4d2:	98 f4       	brcc	.+38     	; 0x4fa <DIO_read_port+0x36>
     4d4:	81 34       	cpi	r24, 0x41	; 65
     4d6:	a9 f4       	brne	.+42     	; 0x502 <DIO_read_port+0x3e>
     4d8:	0c c0       	rjmp	.+24     	; 0x4f2 <DIO_read_port+0x2e>
     4da:	82 36       	cpi	r24, 0x62	; 98
     4dc:	61 f0       	breq	.+24     	; 0x4f6 <DIO_read_port+0x32>
     4de:	83 36       	cpi	r24, 0x63	; 99
     4e0:	18 f4       	brcc	.+6      	; 0x4e8 <DIO_read_port+0x24>
     4e2:	81 36       	cpi	r24, 0x61	; 97
     4e4:	71 f4       	brne	.+28     	; 0x502 <DIO_read_port+0x3e>
     4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <DIO_read_port+0x2e>
     4e8:	83 36       	cpi	r24, 0x63	; 99
     4ea:	39 f0       	breq	.+14     	; 0x4fa <DIO_read_port+0x36>
     4ec:	84 36       	cpi	r24, 0x64	; 100
     4ee:	49 f4       	brne	.+18     	; 0x502 <DIO_read_port+0x3e>
     4f0:	06 c0       	rjmp	.+12     	; 0x4fe <DIO_read_port+0x3a>
	{
		case 'A' :
		case 'a' :
		return_val=PINA; // read the value of port A
     4f2:	89 b3       	in	r24, 0x19	; 25
		break ;
     4f4:	08 95       	ret
		case 'B':
		case 'b' :
		return_val=PINB; // read the value of port B
     4f6:	86 b3       	in	r24, 0x16	; 22
		break ;
     4f8:	08 95       	ret
		case 'C' :
		case 'c' :
		return_val=PINC; // read the value of port C
     4fa:	83 b3       	in	r24, 0x13	; 19
		break ;
     4fc:	08 95       	ret
		case 'D':
		case 'd' :
		return_val=PIND; // read the value of port D
     4fe:	80 b3       	in	r24, 0x10	; 16
		break ;
     500:	08 95       	ret
		break ;
	}
}
unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
     502:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
     504:	08 95       	ret

00000506 <DIO_toggle_port>:
void DIO_toggle_port(unsigned char portname)
{
		switch(portname)
     506:	84 34       	cpi	r24, 0x44	; 68
     508:	09 f1       	breq	.+66     	; 0x54c <DIO_toggle_port+0x46>
     50a:	85 34       	cpi	r24, 0x45	; 69
     50c:	38 f4       	brcc	.+14     	; 0x51c <DIO_toggle_port+0x16>
     50e:	82 34       	cpi	r24, 0x42	; 66
     510:	a9 f0       	breq	.+42     	; 0x53c <DIO_toggle_port+0x36>
     512:	83 34       	cpi	r24, 0x43	; 67
     514:	b8 f4       	brcc	.+46     	; 0x544 <DIO_toggle_port+0x3e>
     516:	81 34       	cpi	r24, 0x41	; 65
     518:	e1 f4       	brne	.+56     	; 0x552 <DIO_toggle_port+0x4c>
     51a:	0c c0       	rjmp	.+24     	; 0x534 <DIO_toggle_port+0x2e>
     51c:	82 36       	cpi	r24, 0x62	; 98
     51e:	71 f0       	breq	.+28     	; 0x53c <DIO_toggle_port+0x36>
     520:	83 36       	cpi	r24, 0x63	; 99
     522:	18 f4       	brcc	.+6      	; 0x52a <DIO_toggle_port+0x24>
     524:	81 36       	cpi	r24, 0x61	; 97
     526:	a9 f4       	brne	.+42     	; 0x552 <DIO_toggle_port+0x4c>
     528:	05 c0       	rjmp	.+10     	; 0x534 <DIO_toggle_port+0x2e>
     52a:	83 36       	cpi	r24, 0x63	; 99
     52c:	59 f0       	breq	.+22     	; 0x544 <DIO_toggle_port+0x3e>
     52e:	84 36       	cpi	r24, 0x64	; 100
     530:	81 f4       	brne	.+32     	; 0x552 <DIO_toggle_port+0x4c>
     532:	0c c0       	rjmp	.+24     	; 0x54c <DIO_toggle_port+0x46>
		{
			case 'A' :
			case 'a' :
			PORTA=~PORTA;
     534:	8b b3       	in	r24, 0x1b	; 27
     536:	80 95       	com	r24
     538:	8b bb       	out	0x1b, r24	; 27
			break;
     53a:	08 95       	ret
			case 'B' :
			case 'b' :
			PORTB=~PORTB;
     53c:	88 b3       	in	r24, 0x18	; 24
     53e:	80 95       	com	r24
     540:	88 bb       	out	0x18, r24	; 24
			break;
     542:	08 95       	ret
			case 'C' :
			case 'c' :
			PORTC=~PORTC;
     544:	85 b3       	in	r24, 0x15	; 21
     546:	80 95       	com	r24
     548:	85 bb       	out	0x15, r24	; 21
			break;
     54a:	08 95       	ret
			case 'D' :
			case 'd' :
			PORTD=~PORTD;
     54c:	82 b3       	in	r24, 0x12	; 18
     54e:	80 95       	com	r24
     550:	82 bb       	out	0x12, r24	; 18
     552:	08 95       	ret

00000554 <DIO_write_low_nibble>:
			break;
		}			
}
void DIO_write_low_nibble(unsigned char portname,unsigned char value)
{
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	c8 2f       	mov	r28, r24
     55c:	06 2f       	mov	r16, r22
	DIO_write_pin(portname,0,READ_BIT(value,0));
     55e:	46 2f       	mov	r20, r22
     560:	41 70       	andi	r20, 0x01	; 1
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	DIO_write_pin(portname,1,READ_BIT(value,1));
     568:	10 e0       	ldi	r17, 0x00	; 0
     56a:	a8 01       	movw	r20, r16
     56c:	42 70       	andi	r20, 0x02	; 2
     56e:	50 70       	andi	r21, 0x00	; 0
     570:	55 95       	asr	r21
     572:	47 95       	ror	r20
     574:	8c 2f       	mov	r24, r28
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	DIO_write_pin(portname,2,READ_BIT(value,2));
     57c:	a8 01       	movw	r20, r16
     57e:	44 70       	andi	r20, 0x04	; 4
     580:	50 70       	andi	r21, 0x00	; 0
     582:	55 95       	asr	r21
     584:	47 95       	ror	r20
     586:	55 95       	asr	r21
     588:	47 95       	ror	r20
     58a:	8c 2f       	mov	r24, r28
     58c:	62 e0       	ldi	r22, 0x02	; 2
     58e:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	DIO_write_pin(portname,3,READ_BIT(value,3));
     592:	08 70       	andi	r16, 0x08	; 8
     594:	10 70       	andi	r17, 0x00	; 0
     596:	a8 01       	movw	r20, r16
     598:	55 95       	asr	r21
     59a:	47 95       	ror	r20
     59c:	55 95       	asr	r21
     59e:	47 95       	ror	r20
     5a0:	55 95       	asr	r21
     5a2:	47 95       	ror	r20
     5a4:	8c 2f       	mov	r24, r28
     5a6:	63 e0       	ldi	r22, 0x03	; 3
     5a8:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
}
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	08 95       	ret

000005b4 <DIO_write_high_nibble>:
void DIO_write_high_nibble(unsigned char portname,unsigned char value)
{
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	c8 2f       	mov	r28, r24
     5bc:	06 2f       	mov	r16, r22
	DIO_write_pin(portname,4,READ_BIT(value,0));
     5be:	46 2f       	mov	r20, r22
     5c0:	41 70       	andi	r20, 0x01	; 1
     5c2:	64 e0       	ldi	r22, 0x04	; 4
     5c4:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	DIO_write_pin(portname,5,READ_BIT(value,1));
     5c8:	10 e0       	ldi	r17, 0x00	; 0
     5ca:	a8 01       	movw	r20, r16
     5cc:	42 70       	andi	r20, 0x02	; 2
     5ce:	50 70       	andi	r21, 0x00	; 0
     5d0:	55 95       	asr	r21
     5d2:	47 95       	ror	r20
     5d4:	8c 2f       	mov	r24, r28
     5d6:	65 e0       	ldi	r22, 0x05	; 5
     5d8:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	DIO_write_pin(portname,6,READ_BIT(value,2));
     5dc:	a8 01       	movw	r20, r16
     5de:	44 70       	andi	r20, 0x04	; 4
     5e0:	50 70       	andi	r21, 0x00	; 0
     5e2:	55 95       	asr	r21
     5e4:	47 95       	ror	r20
     5e6:	55 95       	asr	r21
     5e8:	47 95       	ror	r20
     5ea:	8c 2f       	mov	r24, r28
     5ec:	66 e0       	ldi	r22, 0x06	; 6
     5ee:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	DIO_write_pin(portname,7,READ_BIT(value,3));
     5f2:	08 70       	andi	r16, 0x08	; 8
     5f4:	10 70       	andi	r17, 0x00	; 0
     5f6:	a8 01       	movw	r20, r16
     5f8:	55 95       	asr	r21
     5fa:	47 95       	ror	r20
     5fc:	55 95       	asr	r21
     5fe:	47 95       	ror	r20
     600:	55 95       	asr	r21
     602:	47 95       	ror	r20
     604:	8c 2f       	mov	r24, r28
     606:	67 e0       	ldi	r22, 0x07	; 7
     608:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
}
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	08 95       	ret

00000614 <DIO_vconnectpullup>:
void DIO_vconnectpullup(unsigned char portname,unsigned char pinnumber)
{
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	d8 2f       	mov	r29, r24
     61a:	c6 2f       	mov	r28, r22
	DIO_vsetPINDir(portname,pinnumber,0);
     61c:	40 e0       	ldi	r20, 0x00	; 0
     61e:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_vsetPINDir>
	DIO_write_pin(portname,pinnumber,1);
     622:	8d 2f       	mov	r24, r29
     624:	6c 2f       	mov	r22, r28
     626:	41 e0       	ldi	r20, 0x01	; 1
     628:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <main>:
#include "Qlearning.h"
#include "LED.h"

int main(void)
{
	US_init();
     632:	0e 94 01 09 	call	0x1202	; 0x1202 <US_init>
	M_init();
     636:	0e 94 58 03 	call	0x6b0	; 0x6b0 <M_init>
	
	LED_vInit('A',0);
     63a:	81 e4       	ldi	r24, 0x41	; 65
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	0e 94 43 03 	call	0x686	; 0x686 <LED_vInit>
	LED_vInit('A',1);
     642:	81 e4       	ldi	r24, 0x41	; 65
     644:	61 e0       	ldi	r22, 0x01	; 1
     646:	0e 94 43 03 	call	0x686	; 0x686 <LED_vInit>
	
	LED_vTurnOn('A',1);
     64a:	81 e4       	ldi	r24, 0x41	; 65
     64c:	61 e0       	ldi	r22, 0x01	; 1
     64e:	0e 94 47 03 	call	0x68e	; 0x68e <LED_vTurnOn>
	train3();
     652:	0e 94 1f 07 	call	0xe3e	; 0xe3e <train3>
	LED_vTurnOff('A',1);
     656:	81 e4       	ldi	r24, 0x41	; 65
     658:	61 e0       	ldi	r22, 0x01	; 1
     65a:	0e 94 4b 03 	call	0x696	; 0x696 <LED_vTurnOff>
	
	LED_vTurnOn('A',0);
     65e:	81 e4       	ldi	r24, 0x41	; 65
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	0e 94 47 03 	call	0x68e	; 0x68e <LED_vTurnOn>
	test2();
     666:	0e 94 41 08 	call	0x1082	; 0x1082 <test2>
	LED_vTurnOff('A',0);
     66a:	81 e4       	ldi	r24, 0x41	; 65
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	0e 94 4b 03 	call	0x696	; 0x696 <LED_vTurnOff>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     672:	8f ef       	ldi	r24, 0xFF	; 255
     674:	99 e6       	ldi	r25, 0x69	; 105
     676:	a8 e1       	ldi	r26, 0x18	; 24
     678:	81 50       	subi	r24, 0x01	; 1
     67a:	90 40       	sbci	r25, 0x00	; 0
     67c:	a0 40       	sbci	r26, 0x00	; 0
     67e:	e1 f7       	brne	.-8      	; 0x678 <main+0x46>
     680:	00 c0       	rjmp	.+0      	; 0x682 <main+0x50>
     682:	00 00       	nop
     684:	ff cf       	rjmp	.-2      	; 0x684 <main+0x52>

00000686 <LED_vInit>:
 */ 

#include "DIO.h"
void LED_vInit(unsigned char portname,unsigned char pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,1);
     686:	41 e0       	ldi	r20, 0x01	; 1
     688:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_vsetPINDir>
}
     68c:	08 95       	ret

0000068e <LED_vTurnOn>:
void LED_vTurnOn(unsigned char portname,unsigned char pinnumber)
{
	DIO_write_pin(portname,pinnumber,1);
     68e:	41 e0       	ldi	r20, 0x01	; 1
     690:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
}
     694:	08 95       	ret

00000696 <LED_vTurnOff>:
void LED_vTurnOff(unsigned char portname,unsigned char pinnumber)
{
	DIO_write_pin(portname,pinnumber,0);
     696:	40 e0       	ldi	r20, 0x00	; 0
     698:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
}
     69c:	08 95       	ret

0000069e <LED_vToggle>:
void LED_vToggle(unsigned char portname,unsigned char pinnumber)
{
	DIO_toggle_pin(portname,pinnumber);
     69e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_toggle_pin>
}
     6a2:	08 95       	ret

000006a4 <LED_cRead_status>:
unsigned char LED_cRead_status(unsigned char portname,unsigned char pinnumber)
{
	DIO_u8read(portname,pinnumber);
     6a4:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_u8read>
     6a8:	08 95       	ret

000006aa <Mspeed>:
	_delay_ms(375);
	Mstop();
}
void Mspeed(char dutyCycle)
{
	timer0_wave_fastPWM(dutyCycle);
     6aa:	0e 94 db 08 	call	0x11b6	; 0x11b6 <timer0_wave_fastPWM>
     6ae:	08 95       	ret

000006b0 <M_init>:
#include "std_macro.h"
#include "DIO.h"
#include "timer.h"
void M_init()
{
	DIO_vsetPINDir('B',4,1);
     6b0:	82 e4       	ldi	r24, 0x42	; 66
     6b2:	64 e0       	ldi	r22, 0x04	; 4
     6b4:	41 e0       	ldi	r20, 0x01	; 1
     6b6:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_vsetPINDir>
	DIO_vsetPINDir('B',5,1);
     6ba:	82 e4       	ldi	r24, 0x42	; 66
     6bc:	65 e0       	ldi	r22, 0x05	; 5
     6be:	41 e0       	ldi	r20, 0x01	; 1
     6c0:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_vsetPINDir>
	DIO_vsetPINDir('B',6,1);
     6c4:	82 e4       	ldi	r24, 0x42	; 66
     6c6:	66 e0       	ldi	r22, 0x06	; 6
     6c8:	41 e0       	ldi	r20, 0x01	; 1
     6ca:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_vsetPINDir>
	DIO_vsetPINDir('B',7,1);
     6ce:	82 e4       	ldi	r24, 0x42	; 66
     6d0:	67 e0       	ldi	r22, 0x07	; 7
     6d2:	41 e0       	ldi	r20, 0x01	; 1
     6d4:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_vsetPINDir>
}
     6d8:	08 95       	ret

000006da <Mstop>:
void Mstop()
{
	DIO_write_pin('B',4,0);
     6da:	82 e4       	ldi	r24, 0x42	; 66
     6dc:	64 e0       	ldi	r22, 0x04	; 4
     6de:	40 e0       	ldi	r20, 0x00	; 0
     6e0:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	DIO_write_pin('B',5,0);
     6e4:	82 e4       	ldi	r24, 0x42	; 66
     6e6:	65 e0       	ldi	r22, 0x05	; 5
     6e8:	40 e0       	ldi	r20, 0x00	; 0
     6ea:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	
	DIO_write_pin('B',6,0);
     6ee:	82 e4       	ldi	r24, 0x42	; 66
     6f0:	66 e0       	ldi	r22, 0x06	; 6
     6f2:	40 e0       	ldi	r20, 0x00	; 0
     6f4:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	DIO_write_pin('B',7,0);
     6f8:	82 e4       	ldi	r24, 0x42	; 66
     6fa:	67 e0       	ldi	r22, 0x07	; 7
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	
	
}
     702:	08 95       	ret

00000704 <Mforward>:
void Mforward()
{
	Mspeed(8);
     704:	88 e0       	ldi	r24, 0x08	; 8
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 55 03 	call	0x6aa	; 0x6aa <Mspeed>
	DIO_write_pin('B',4,0);
     70c:	82 e4       	ldi	r24, 0x42	; 66
     70e:	64 e0       	ldi	r22, 0x04	; 4
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	DIO_write_pin('B',5,1);
     716:	82 e4       	ldi	r24, 0x42	; 66
     718:	65 e0       	ldi	r22, 0x05	; 5
     71a:	41 e0       	ldi	r20, 0x01	; 1
     71c:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	
	DIO_write_pin('B',6,0);
     720:	82 e4       	ldi	r24, 0x42	; 66
     722:	66 e0       	ldi	r22, 0x06	; 6
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	DIO_write_pin('B',7,1);
     72a:	82 e4       	ldi	r24, 0x42	; 66
     72c:	67 e0       	ldi	r22, 0x07	; 7
     72e:	41 e0       	ldi	r20, 0x01	; 1
     730:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
}
     734:	08 95       	ret

00000736 <Mback>:
void Mback() 
{
	Mspeed(8);
     736:	88 e0       	ldi	r24, 0x08	; 8
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 55 03 	call	0x6aa	; 0x6aa <Mspeed>
	DIO_write_pin('B',4,1);       //right wheel
     73e:	82 e4       	ldi	r24, 0x42	; 66
     740:	64 e0       	ldi	r22, 0x04	; 4
     742:	41 e0       	ldi	r20, 0x01	; 1
     744:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	DIO_write_pin('B',5,0);
     748:	82 e4       	ldi	r24, 0x42	; 66
     74a:	65 e0       	ldi	r22, 0x05	; 5
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	
	DIO_write_pin('B',6,1);
     752:	82 e4       	ldi	r24, 0x42	; 66
     754:	66 e0       	ldi	r22, 0x06	; 6
     756:	41 e0       	ldi	r20, 0x01	; 1
     758:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	DIO_write_pin('B',7,0);
     75c:	82 e4       	ldi	r24, 0x42	; 66
     75e:	67 e0       	ldi	r22, 0x07	; 7
     760:	40 e0       	ldi	r20, 0x00	; 0
     762:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
}
     766:	08 95       	ret

00000768 <Mleft>:
void Mleft()
{

	Mspeed(15);
     768:	8f e0       	ldi	r24, 0x0F	; 15
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 55 03 	call	0x6aa	; 0x6aa <Mspeed>
	DIO_write_pin('B',4,0);      //right wheel 
     770:	82 e4       	ldi	r24, 0x42	; 66
     772:	64 e0       	ldi	r22, 0x04	; 4
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	DIO_write_pin('B',5,1);
     77a:	82 e4       	ldi	r24, 0x42	; 66
     77c:	65 e0       	ldi	r22, 0x05	; 5
     77e:	41 e0       	ldi	r20, 0x01	; 1
     780:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	
	DIO_write_pin('B',6,1);      //left wheel   
     784:	82 e4       	ldi	r24, 0x42	; 66
     786:	66 e0       	ldi	r22, 0x06	; 6
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	DIO_write_pin('B',7,0);
     78e:	82 e4       	ldi	r24, 0x42	; 66
     790:	67 e0       	ldi	r22, 0x07	; 7
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
     798:	8f eb       	ldi	r24, 0xBF	; 191
     79a:	97 e2       	ldi	r25, 0x27	; 39
     79c:	a9 e0       	ldi	r26, 0x09	; 9
     79e:	81 50       	subi	r24, 0x01	; 1
     7a0:	90 40       	sbci	r25, 0x00	; 0
     7a2:	a0 40       	sbci	r26, 0x00	; 0
     7a4:	e1 f7       	brne	.-8      	; 0x79e <Mleft+0x36>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <Mleft+0x40>
     7a8:	00 00       	nop
	
	_delay_ms(375);
	Mstop();
     7aa:	0e 94 6d 03 	call	0x6da	; 0x6da <Mstop>
	
}
     7ae:	08 95       	ret

000007b0 <Mright>:
void Mright()
{
	Mspeed(15);
     7b0:	8f e0       	ldi	r24, 0x0F	; 15
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 55 03 	call	0x6aa	; 0x6aa <Mspeed>
	DIO_write_pin('B',4,1);
     7b8:	82 e4       	ldi	r24, 0x42	; 66
     7ba:	64 e0       	ldi	r22, 0x04	; 4
     7bc:	41 e0       	ldi	r20, 0x01	; 1
     7be:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	DIO_write_pin('B',5,0);
     7c2:	82 e4       	ldi	r24, 0x42	; 66
     7c4:	65 e0       	ldi	r22, 0x05	; 5
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	
	DIO_write_pin('B',6,0);
     7cc:	82 e4       	ldi	r24, 0x42	; 66
     7ce:	66 e0       	ldi	r22, 0x06	; 6
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	DIO_write_pin('B',7,1);
     7d6:	82 e4       	ldi	r24, 0x42	; 66
     7d8:	67 e0       	ldi	r22, 0x07	; 7
     7da:	41 e0       	ldi	r20, 0x01	; 1
     7dc:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
     7e0:	8f eb       	ldi	r24, 0xBF	; 191
     7e2:	97 e2       	ldi	r25, 0x27	; 39
     7e4:	a9 e0       	ldi	r26, 0x09	; 9
     7e6:	81 50       	subi	r24, 0x01	; 1
     7e8:	90 40       	sbci	r25, 0x00	; 0
     7ea:	a0 40       	sbci	r26, 0x00	; 0
     7ec:	e1 f7       	brne	.-8      	; 0x7e6 <Mright+0x36>
     7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <Mright+0x40>
     7f0:	00 00       	nop
	
	_delay_ms(375);
	Mstop();
     7f2:	0e 94 6d 03 	call	0x6da	; 0x6da <Mstop>
}
     7f6:	08 95       	ret

000007f8 <Q_random>:
};



float Q_random(){
	return (float)(((rand()%100))/100.0);
     7f8:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <rand>
     7fc:	64 e6       	ldi	r22, 0x64	; 100
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__divmodhi4>
     804:	9c 01       	movw	r18, r24
     806:	b9 01       	movw	r22, r18
     808:	88 27       	eor	r24, r24
     80a:	77 fd       	sbrc	r23, 7
     80c:	80 95       	com	r24
     80e:	98 2f       	mov	r25, r24
     810:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__floatsisf>
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	48 ec       	ldi	r20, 0xC8	; 200
     81a:	52 e4       	ldi	r21, 0x42	; 66
     81c:	0e 94 b5 09 	call	0x136a	; 0x136a <__divsf3>
}
     820:	46 2f       	mov	r20, r22
     822:	57 2f       	mov	r21, r23
     824:	68 2f       	mov	r22, r24
     826:	79 2f       	mov	r23, r25
     828:	cb 01       	movw	r24, r22
     82a:	ba 01       	movw	r22, r20
     82c:	08 95       	ret

0000082e <decay>:

float decay(float value){
	return (value*0.99);
     82e:	24 ea       	ldi	r18, 0xA4	; 164
     830:	30 e7       	ldi	r19, 0x70	; 112
     832:	4d e7       	ldi	r20, 0x7D	; 125
     834:	5f e3       	ldi	r21, 0x3F	; 63
     836:	0e 94 04 0b 	call	0x1608	; 0x1608 <__mulsf3>
}
     83a:	46 2f       	mov	r20, r22
     83c:	57 2f       	mov	r21, r23
     83e:	68 2f       	mov	r22, r24
     840:	79 2f       	mov	r23, r25
     842:	cb 01       	movw	r24, r22
     844:	ba 01       	movw	r22, r20
     846:	08 95       	ret

00000848 <Q_max>:

float Q_max(float n1,float n2){
     848:	af 92       	push	r10
     84a:	bf 92       	push	r11
     84c:	cf 92       	push	r12
     84e:	df 92       	push	r13
     850:	ef 92       	push	r14
     852:	ff 92       	push	r15
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	d6 2f       	mov	r29, r22
     85e:	c7 2f       	mov	r28, r23
     860:	f8 2e       	mov	r15, r24
     862:	e9 2e       	mov	r14, r25
     864:	d2 2e       	mov	r13, r18
     866:	c3 2e       	mov	r12, r19
     868:	b4 2e       	mov	r11, r20
     86a:	a5 2e       	mov	r10, r21
	if(n1 >= n2)
     86c:	86 2f       	mov	r24, r22
     86e:	97 2f       	mov	r25, r23
     870:	af 2d       	mov	r26, r15
     872:	be 2d       	mov	r27, r14
     874:	bc 01       	movw	r22, r24
     876:	cd 01       	movw	r24, r26
     878:	0d 2d       	mov	r16, r13
     87a:	1c 2d       	mov	r17, r12
     87c:	2b 2d       	mov	r18, r11
     87e:	3a 2d       	mov	r19, r10
     880:	a9 01       	movw	r20, r18
     882:	98 01       	movw	r18, r16
     884:	0e 94 00 0b 	call	0x1600	; 0x1600 <__gesf2>
     888:	88 23       	and	r24, r24
     88a:	24 f4       	brge	.+8      	; 0x894 <__stack+0x35>
		return n1;
	return n2;
     88c:	dd 2d       	mov	r29, r13
     88e:	cc 2d       	mov	r28, r12
     890:	fb 2c       	mov	r15, r11
     892:	ea 2c       	mov	r14, r10
}
     894:	8d 2f       	mov	r24, r29
     896:	9c 2f       	mov	r25, r28
     898:	af 2d       	mov	r26, r15
     89a:	be 2d       	mov	r27, r14
     89c:	bc 01       	movw	r22, r24
     89e:	cd 01       	movw	r24, r26
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	df 90       	pop	r13
     8ae:	cf 90       	pop	r12
     8b0:	bf 90       	pop	r11
     8b2:	af 90       	pop	r10
     8b4:	08 95       	ret

000008b6 <getMax>:

// By Helal
struct max_val getMax(int next_s){
     8b6:	2f 92       	push	r2
     8b8:	3f 92       	push	r3
     8ba:	4f 92       	push	r4
     8bc:	5f 92       	push	r5
     8be:	6f 92       	push	r6
     8c0:	7f 92       	push	r7
     8c2:	8f 92       	push	r8
     8c4:	9f 92       	push	r9
     8c6:	af 92       	push	r10
     8c8:	bf 92       	push	r11
     8ca:	cf 92       	push	r12
     8cc:	df 92       	push	r13
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	2a 97       	sbiw	r28, 0x0a	; 10
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	cd bf       	out	0x3d, r28	; 61
     8ea:	82 95       	swap	r24
     8ec:	92 95       	swap	r25
     8ee:	90 7f       	andi	r25, 0xF0	; 240
     8f0:	98 27       	eor	r25, r24
     8f2:	80 7f       	andi	r24, 0xF0	; 240
     8f4:	98 27       	eor	r25, r24
     8f6:	0f 2e       	mov	r0, r31
     8f8:	fa ee       	ldi	r31, 0xEA	; 234
     8fa:	4f 2e       	mov	r4, r31
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	5f 2e       	mov	r5, r31
     900:	f0 2d       	mov	r31, r0
     902:	48 0e       	add	r4, r24
     904:	59 1e       	adc	r5, r25
struct max_val x={-10000,-1};
     906:	33 24       	eor	r3, r3
     908:	22 24       	eor	r2, r2
     90a:	80 e8       	ldi	r24, 0x80	; 128
     90c:	89 87       	std	Y+9, r24	; 0x09
     90e:	ef eb       	ldi	r30, 0xBF	; 191
     910:	ea 87       	std	Y+10, r30	; 0x0a
     912:	bb 24       	eor	r11, r11
     914:	aa 24       	eor	r10, r10
     916:	68 94       	set
     918:	a6 f8       	bld	r10, 6
     91a:	0f 2e       	mov	r0, r31
     91c:	fc e1       	ldi	r31, 0x1C	; 28
     91e:	9f 2e       	mov	r9, r31
     920:	f0 2d       	mov	r31, r0
     922:	0f 2e       	mov	r0, r31
     924:	f6 ec       	ldi	r31, 0xC6	; 198
     926:	8f 2e       	mov	r8, r31
     928:	f0 2d       	mov	r31, r0
for (int i = 0; i < ACTIONS; ++i) {
     92a:	66 24       	eor	r6, r6
     92c:	77 24       	eor	r7, r7
	x._max = Q_max(x._max, Q2[next_s][i]);
     92e:	f2 01       	movw	r30, r4
     930:	c1 90       	ld	r12, Z+
     932:	d1 90       	ld	r13, Z+
     934:	e1 90       	ld	r14, Z+
     936:	f1 90       	ld	r15, Z+
     938:	2f 01       	movw	r4, r30
     93a:	8b 2d       	mov	r24, r11
     93c:	9a 2d       	mov	r25, r10
     93e:	a9 2d       	mov	r26, r9
     940:	b8 2d       	mov	r27, r8
     942:	bc 01       	movw	r22, r24
     944:	cd 01       	movw	r24, r26
     946:	a7 01       	movw	r20, r14
     948:	96 01       	movw	r18, r12
     94a:	0e 94 24 04 	call	0x848	; 0x848 <Q_max>
     94e:	b6 2e       	mov	r11, r22
     950:	a7 2e       	mov	r10, r23
     952:	98 2e       	mov	r9, r24
     954:	89 2e       	mov	r8, r25
	if(x._max == Q2[next_s][i])
     956:	c7 01       	movw	r24, r14
     958:	b6 01       	movw	r22, r12
     95a:	0b 2d       	mov	r16, r11
     95c:	1a 2d       	mov	r17, r10
     95e:	29 2d       	mov	r18, r9
     960:	38 2d       	mov	r19, r8
     962:	a9 01       	movw	r20, r18
     964:	98 01       	movw	r18, r16
     966:	0e 94 b1 09 	call	0x1362	; 0x1362 <__cmpsf2>
     96a:	88 23       	and	r24, r24
     96c:	59 f4       	brne	.+22     	; 0x984 <getMax+0xce>
	x._max_ind=i;
     96e:	b3 01       	movw	r22, r6
     970:	88 27       	eor	r24, r24
     972:	77 fd       	sbrc	r23, 7
     974:	80 95       	com	r24
     976:	98 2f       	mov	r25, r24
     978:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__floatsisf>
     97c:	36 2e       	mov	r3, r22
     97e:	27 2e       	mov	r2, r23
     980:	89 87       	std	Y+9, r24	; 0x09
     982:	9a 87       	std	Y+10, r25	; 0x0a
}

// By Helal
struct max_val getMax(int next_s){
struct max_val x={-10000,-1};
for (int i = 0; i < ACTIONS; ++i) {
     984:	08 94       	sec
     986:	61 1c       	adc	r6, r1
     988:	71 1c       	adc	r7, r1
     98a:	f4 e0       	ldi	r31, 0x04	; 4
     98c:	6f 16       	cp	r6, r31
     98e:	71 04       	cpc	r7, r1
     990:	71 f6       	brne	.-100    	; 0x92e <getMax+0x78>
	x._max = Q_max(x._max, Q2[next_s][i]);
	if(x._max == Q2[next_s][i])
	x._max_ind=i;
}
return x;
     992:	8b 2d       	mov	r24, r11
     994:	9a 2d       	mov	r25, r10
     996:	a9 2d       	mov	r26, r9
     998:	b8 2d       	mov	r27, r8
     99a:	89 83       	std	Y+1, r24	; 0x01
     99c:	9a 83       	std	Y+2, r25	; 0x02
     99e:	ab 83       	std	Y+3, r26	; 0x03
     9a0:	bc 83       	std	Y+4, r27	; 0x04
     9a2:	83 2d       	mov	r24, r3
     9a4:	92 2d       	mov	r25, r2
     9a6:	a9 85       	ldd	r26, Y+9	; 0x09
     9a8:	ba 85       	ldd	r27, Y+10	; 0x0a
     9aa:	8d 83       	std	Y+5, r24	; 0x05
     9ac:	9e 83       	std	Y+6, r25	; 0x06
     9ae:	af 83       	std	Y+7, r26	; 0x07
     9b0:	b8 87       	std	Y+8, r27	; 0x08
     9b2:	2b 2d       	mov	r18, r11
     9b4:	3a 81       	ldd	r19, Y+2	; 0x02
     9b6:	4b 81       	ldd	r20, Y+3	; 0x03
     9b8:	5c 81       	ldd	r21, Y+4	; 0x04
     9ba:	63 2d       	mov	r22, r3
     9bc:	7e 81       	ldd	r23, Y+6	; 0x06
}
     9be:	8f 81       	ldd	r24, Y+7	; 0x07
     9c0:	98 85       	ldd	r25, Y+8	; 0x08
     9c2:	2a 96       	adiw	r28, 0x0a	; 10
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	cf 90       	pop	r12
     9de:	bf 90       	pop	r11
     9e0:	af 90       	pop	r10
     9e2:	9f 90       	pop	r9
     9e4:	8f 90       	pop	r8
     9e6:	7f 90       	pop	r7
     9e8:	6f 90       	pop	r6
     9ea:	5f 90       	pop	r5
     9ec:	4f 90       	pop	r4
     9ee:	3f 90       	pop	r3
     9f0:	2f 90       	pop	r2
     9f2:	08 95       	ret

000009f4 <getState>:

int getState() // read the three ultrasonics 
{
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
	int R = US_read_distance('R');
     9fc:	82 e5       	ldi	r24, 0x52	; 82
     9fe:	0e 94 31 09 	call	0x1262	; 0x1262 <US_read_distance>
     a02:	08 2f       	mov	r16, r24
     a04:	10 e0       	ldi	r17, 0x00	; 0
     a06:	8f ec       	ldi	r24, 0xCF	; 207
     a08:	97 e0       	ldi	r25, 0x07	; 7
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	f1 f7       	brne	.-4      	; 0xa0a <getState+0x16>
     a0e:	00 c0       	rjmp	.+0      	; 0xa10 <getState+0x1c>
     a10:	00 00       	nop
	_delay_ms(1);
	int L = US_read_distance('L');
     a12:	8c e4       	ldi	r24, 0x4C	; 76
     a14:	0e 94 31 09 	call	0x1262	; 0x1262 <US_read_distance>
     a18:	c8 2f       	mov	r28, r24
     a1a:	8f ec       	ldi	r24, 0xCF	; 207
     a1c:	97 e0       	ldi	r25, 0x07	; 7
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	f1 f7       	brne	.-4      	; 0xa1e <getState+0x2a>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <getState+0x30>
     a24:	00 00       	nop
	_delay_ms(1);
	int M = US_read_distance('F');
     a26:	86 e4       	ldi	r24, 0x46	; 70
     a28:	0e 94 31 09 	call	0x1262	; 0x1262 <US_read_distance>
     a2c:	90 e0       	ldi	r25, 0x00	; 0

int getState() // read the three ultrasonics 
{
	int R = US_read_distance('R');
	_delay_ms(1);
	int L = US_read_distance('L');
     a2e:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(1);
	int M = US_read_distance('F');

	if ((L>80) && (M>85) && (R>80)) //000
     a30:	c1 35       	cpi	r28, 0x51	; 81
     a32:	d1 05       	cpc	r29, r1
     a34:	9c f0       	brlt	.+38     	; 0xa5c <getState+0x68>
     a36:	86 35       	cpi	r24, 0x56	; 86
     a38:	91 05       	cpc	r25, r1
     a3a:	3c f0       	brlt	.+14     	; 0xa4a <getState+0x56>
     a3c:	01 35       	cpi	r16, 0x51	; 81
     a3e:	11 05       	cpc	r17, r1
     a40:	04 f5       	brge	.+64     	; 0xa82 <getState+0x8e>
		return 0;
	else if ((L>80) && (M>85) && (R<=80))
     a42:	01 35       	cpi	r16, 0x51	; 81
     a44:	11 05       	cpc	r17, r1
     a46:	cc f5       	brge	.+114    	; 0xaba <getState+0xc6>
     a48:	1f c0       	rjmp	.+62     	; 0xa88 <getState+0x94>
		return 1;
	else if ((L>80) && (M<=85) && (R>80))
     a4a:	01 35       	cpi	r16, 0x51	; 81
     a4c:	11 05       	cpc	r17, r1
     a4e:	fc f4       	brge	.+62     	; 0xa8e <getState+0x9a>
		return 2;
	else if ((L>80) && (M<=85) && (R<=80))
     a50:	01 35       	cpi	r16, 0x51	; 81
     a52:	11 05       	cpc	r17, r1
     a54:	fc f0       	brlt	.+62     	; 0xa94 <getState+0xa0>
	else if ((L<=80) && (M<=85) && (R>80))
		return 6;
	else if ((L<=80) && (M<=85) && (R<=80)) //111
		return 7;
	else 
		return -1;
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	9f ef       	ldi	r25, 0xFF	; 255
     a5a:	2a c0       	rjmp	.+84     	; 0xab0 <getState+0xbc>
		return 1;
	else if ((L>80) && (M<=85) && (R>80))
		return 2;
	else if ((L>80) && (M<=85) && (R<=80))
		return 3;
	else if ((L<=80) && (M>85) && (R>80))
     a5c:	86 35       	cpi	r24, 0x56	; 86
     a5e:	91 05       	cpc	r25, r1
     a60:	3c f0       	brlt	.+14     	; 0xa70 <getState+0x7c>
     a62:	01 35       	cpi	r16, 0x51	; 81
     a64:	11 05       	cpc	r17, r1
     a66:	cc f4       	brge	.+50     	; 0xa9a <getState+0xa6>
		return 4;
	else if ((L<=80) && (M>85) && (R<=80))
     a68:	01 35       	cpi	r16, 0x51	; 81
     a6a:	11 05       	cpc	r17, r1
     a6c:	cc f0       	brlt	.+50     	; 0xaa0 <getState+0xac>
     a6e:	28 c0       	rjmp	.+80     	; 0xac0 <getState+0xcc>
		return 5;
	else if ((L<=80) && (M<=85) && (R>80))
     a70:	01 35       	cpi	r16, 0x51	; 81
     a72:	11 05       	cpc	r17, r1
     a74:	c4 f4       	brge	.+48     	; 0xaa6 <getState+0xb2>
		return 6;
	else if ((L<=80) && (M<=85) && (R<=80)) //111
     a76:	01 35       	cpi	r16, 0x51	; 81
     a78:	11 05       	cpc	r17, r1
     a7a:	c4 f0       	brlt	.+48     	; 0xaac <getState+0xb8>
		return 7;
	else 
		return -1;
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
     a7e:	9f ef       	ldi	r25, 0xFF	; 255
     a80:	17 c0       	rjmp	.+46     	; 0xab0 <getState+0xbc>
	int L = US_read_distance('L');
	_delay_ms(1);
	int M = US_read_distance('F');

	if ((L>80) && (M>85) && (R>80)) //000
		return 0;
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	14 c0       	rjmp	.+40     	; 0xab0 <getState+0xbc>
	else if ((L>80) && (M>85) && (R<=80))
		return 1;
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	11 c0       	rjmp	.+34     	; 0xab0 <getState+0xbc>
	else if ((L>80) && (M<=85) && (R>80))
		return 2;
     a8e:	82 e0       	ldi	r24, 0x02	; 2
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e c0       	rjmp	.+28     	; 0xab0 <getState+0xbc>
	else if ((L>80) && (M<=85) && (R<=80))
		return 3;
     a94:	83 e0       	ldi	r24, 0x03	; 3
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0b c0       	rjmp	.+22     	; 0xab0 <getState+0xbc>
	else if ((L<=80) && (M>85) && (R>80))
		return 4;
     a9a:	84 e0       	ldi	r24, 0x04	; 4
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	08 c0       	rjmp	.+16     	; 0xab0 <getState+0xbc>
	else if ((L<=80) && (M>85) && (R<=80))
		return 5;
     aa0:	85 e0       	ldi	r24, 0x05	; 5
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	05 c0       	rjmp	.+10     	; 0xab0 <getState+0xbc>
	else if ((L<=80) && (M<=85) && (R>80))
		return 6;
     aa6:	86 e0       	ldi	r24, 0x06	; 6
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <getState+0xbc>
	else if ((L<=80) && (M<=85) && (R<=80)) //111
		return 7;
     aac:	87 e0       	ldi	r24, 0x07	; 7
     aae:	90 e0       	ldi	r25, 0x00	; 0
	else 
		return -1;
}
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	08 95       	ret
	else if ((L<=80) && (M<=85) && (R>80))
		return 6;
	else if ((L<=80) && (M<=85) && (R<=80)) //111
		return 7;
	else 
		return -1;
     aba:	8f ef       	ldi	r24, 0xFF	; 255
     abc:	9f ef       	ldi	r25, 0xFF	; 255
     abe:	f8 cf       	rjmp	.-16     	; 0xab0 <getState+0xbc>
     ac0:	8f ef       	ldi	r24, 0xFF	; 255
     ac2:	9f ef       	ldi	r25, 0xFF	; 255
     ac4:	f5 cf       	rjmp	.-22     	; 0xab0 <getState+0xbc>

00000ac6 <update2>:
}

void update2(int state, int next_s, int action, int state_reward){
     ac6:	4f 92       	push	r4
     ac8:	5f 92       	push	r5
     aca:	6f 92       	push	r6
     acc:	7f 92       	push	r7
     ace:	8f 92       	push	r8
     ad0:	9f 92       	push	r9
     ad2:	af 92       	push	r10
     ad4:	bf 92       	push	r11
     ad6:	cf 92       	push	r12
     ad8:	df 92       	push	r13
     ada:	ef 92       	push	r14
     adc:	ff 92       	push	r15
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
     aea:	64 97       	sbiw	r28, 0x14	; 20
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	cd bf       	out	0x3d, r28	; 61
     af6:	8c 01       	movw	r16, r24
     af8:	cb 01       	movw	r24, r22
     afa:	5a 01       	movw	r10, r20
     afc:	49 01       	movw	r8, r18
	Old_Q = Q2[state][action];
     afe:	f8 01       	movw	r30, r16
     b00:	ee 0f       	add	r30, r30
     b02:	ff 1f       	adc	r31, r31
     b04:	ee 0f       	add	r30, r30
     b06:	ff 1f       	adc	r31, r31
     b08:	e4 0f       	add	r30, r20
     b0a:	f5 1f       	adc	r31, r21
     b0c:	ee 0f       	add	r30, r30
     b0e:	ff 1f       	adc	r31, r31
     b10:	ee 0f       	add	r30, r30
     b12:	ff 1f       	adc	r31, r31
     b14:	e6 51       	subi	r30, 0x16	; 22
     b16:	ff 4f       	sbci	r31, 0xFF	; 255
     b18:	c0 80       	ld	r12, Z
     b1a:	d1 80       	ldd	r13, Z+1	; 0x01
     b1c:	e2 80       	ldd	r14, Z+2	; 0x02
     b1e:	f3 80       	ldd	r15, Z+3	; 0x03
     b20:	c0 92 78 01 	sts	0x0178, r12
     b24:	d0 92 79 01 	sts	0x0179, r13
     b28:	e0 92 7a 01 	sts	0x017A, r14
     b2c:	f0 92 7b 01 	sts	0x017B, r15
	max_Q = getMax(next_s)._max;
     b30:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <getMax>
     b34:	29 87       	std	Y+9, r18	; 0x09
     b36:	3a 87       	std	Y+10, r19	; 0x0a
     b38:	4b 87       	std	Y+11, r20	; 0x0b
     b3a:	5c 87       	std	Y+12, r21	; 0x0c
     b3c:	6d 87       	std	Y+13, r22	; 0x0d
     b3e:	7e 87       	std	Y+14, r23	; 0x0e
     b40:	8f 87       	std	Y+15, r24	; 0x0f
     b42:	98 8b       	std	Y+16, r25	; 0x10
     b44:	fe 01       	movw	r30, r28
     b46:	31 96       	adiw	r30, 0x01	; 1
     b48:	de 01       	movw	r26, r28
     b4a:	19 96       	adiw	r26, 0x09	; 9
     b4c:	88 e0       	ldi	r24, 0x08	; 8
     b4e:	0d 90       	ld	r0, X+
     b50:	01 92       	st	Z+, r0
     b52:	81 50       	subi	r24, 0x01	; 1
     b54:	e1 f7       	brne	.-8      	; 0xb4e <update2+0x88>
     b56:	49 80       	ldd	r4, Y+1	; 0x01
     b58:	5a 80       	ldd	r5, Y+2	; 0x02
     b5a:	6b 80       	ldd	r6, Y+3	; 0x03
     b5c:	7c 80       	ldd	r7, Y+4	; 0x04
     b5e:	40 92 70 01 	sts	0x0170, r4
     b62:	50 92 71 01 	sts	0x0171, r5
     b66:	60 92 72 01 	sts	0x0172, r6
     b6a:	70 92 73 01 	sts	0x0173, r7
	new_Q = ((1.0f - ALPHA)*Old_Q + ALPHA*(state_reward + GAMMA*max_Q));
     b6e:	c7 01       	movw	r24, r14
     b70:	b6 01       	movw	r22, r12
     b72:	26 e6       	ldi	r18, 0x66	; 102
     b74:	36 e6       	ldi	r19, 0x66	; 102
     b76:	46 e6       	ldi	r20, 0x66	; 102
     b78:	5f e3       	ldi	r21, 0x3F	; 63
     b7a:	0e 94 04 0b 	call	0x1608	; 0x1608 <__mulsf3>
     b7e:	69 8b       	std	Y+17, r22	; 0x11
     b80:	7a 8b       	std	Y+18, r23	; 0x12
     b82:	8b 8b       	std	Y+19, r24	; 0x13
     b84:	9c 8b       	std	Y+20, r25	; 0x14
     b86:	b4 01       	movw	r22, r8
     b88:	88 27       	eor	r24, r24
     b8a:	77 fd       	sbrc	r23, 7
     b8c:	80 95       	com	r24
     b8e:	98 2f       	mov	r25, r24
     b90:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__floatsisf>
     b94:	6b 01       	movw	r12, r22
     b96:	7c 01       	movw	r14, r24
     b98:	c3 01       	movw	r24, r6
     b9a:	b2 01       	movw	r22, r4
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	5f e3       	ldi	r21, 0x3F	; 63
     ba4:	0e 94 04 0b 	call	0x1608	; 0x1608 <__mulsf3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	c7 01       	movw	r24, r14
     bae:	b6 01       	movw	r22, r12
     bb0:	0e 94 4d 09 	call	0x129a	; 0x129a <__addsf3>
     bb4:	2d ec       	ldi	r18, 0xCD	; 205
     bb6:	3c ec       	ldi	r19, 0xCC	; 204
     bb8:	4c ec       	ldi	r20, 0xCC	; 204
     bba:	5d e3       	ldi	r21, 0x3D	; 61
     bbc:	0e 94 04 0b 	call	0x1608	; 0x1608 <__mulsf3>
     bc0:	9b 01       	movw	r18, r22
     bc2:	ac 01       	movw	r20, r24
     bc4:	69 89       	ldd	r22, Y+17	; 0x11
     bc6:	7a 89       	ldd	r23, Y+18	; 0x12
     bc8:	8b 89       	ldd	r24, Y+19	; 0x13
     bca:	9c 89       	ldd	r25, Y+20	; 0x14
     bcc:	0e 94 4d 09 	call	0x129a	; 0x129a <__addsf3>
     bd0:	26 2f       	mov	r18, r22
     bd2:	37 2f       	mov	r19, r23
     bd4:	46 2f       	mov	r20, r22
     bd6:	57 2f       	mov	r21, r23
     bd8:	68 2f       	mov	r22, r24
     bda:	79 2f       	mov	r23, r25
     bdc:	40 93 74 01 	sts	0x0174, r20
     be0:	50 93 75 01 	sts	0x0175, r21
     be4:	60 93 76 01 	sts	0x0176, r22
     be8:	70 93 77 01 	sts	0x0177, r23
	Q2[state][action] = new_Q;
     bec:	00 0f       	add	r16, r16
     bee:	11 1f       	adc	r17, r17
     bf0:	00 0f       	add	r16, r16
     bf2:	11 1f       	adc	r17, r17
     bf4:	0a 0d       	add	r16, r10
     bf6:	1b 1d       	adc	r17, r11
     bf8:	f8 01       	movw	r30, r16
     bfa:	ee 0f       	add	r30, r30
     bfc:	ff 1f       	adc	r31, r31
     bfe:	ee 0f       	add	r30, r30
     c00:	ff 1f       	adc	r31, r31
     c02:	e6 51       	subi	r30, 0x16	; 22
     c04:	ff 4f       	sbci	r31, 0xFF	; 255
     c06:	58 2f       	mov	r21, r24
     c08:	49 2f       	mov	r20, r25
     c0a:	82 2f       	mov	r24, r18
     c0c:	93 2f       	mov	r25, r19
     c0e:	a5 2f       	mov	r26, r21
     c10:	b4 2f       	mov	r27, r20
     c12:	80 83       	st	Z, r24
     c14:	91 83       	std	Z+1, r25	; 0x01
     c16:	a2 83       	std	Z+2, r26	; 0x02
     c18:	b3 83       	std	Z+3, r27	; 0x03
}
     c1a:	64 96       	adiw	r28, 0x14	; 20
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	1f 91       	pop	r17
     c2c:	0f 91       	pop	r16
     c2e:	ff 90       	pop	r15
     c30:	ef 90       	pop	r14
     c32:	df 90       	pop	r13
     c34:	cf 90       	pop	r12
     c36:	bf 90       	pop	r11
     c38:	af 90       	pop	r10
     c3a:	9f 90       	pop	r9
     c3c:	8f 90       	pop	r8
     c3e:	7f 90       	pop	r7
     c40:	6f 90       	pop	r6
     c42:	5f 90       	pop	r5
     c44:	4f 90       	pop	r4
     c46:	08 95       	ret

00000c48 <train2>:

void train2(){
     c48:	3f 92       	push	r3
     c4a:	4f 92       	push	r4
     c4c:	5f 92       	push	r5
     c4e:	6f 92       	push	r6
     c50:	7f 92       	push	r7
     c52:	8f 92       	push	r8
     c54:	9f 92       	push	r9
     c56:	af 92       	push	r10
     c58:	bf 92       	push	r11
     c5a:	cf 92       	push	r12
     c5c:	df 92       	push	r13
     c5e:	ef 92       	push	r14
     c60:	ff 92       	push	r15
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	60 97       	sbiw	r28, 0x10	; 16
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
	int ultra;
	//DDRA |= 1 << 4;
	//PORTB |= 1 << 4;
	for (int i = 0; i < episodes; i++) {
     c7a:	80 91 e4 00 	lds	r24, 0x00E4
     c7e:	90 91 e5 00 	lds	r25, 0x00E5
     c82:	18 16       	cp	r1, r24
     c84:	19 06       	cpc	r1, r25
     c86:	0c f0       	brlt	.+2      	; 0xc8a <train2+0x42>
     c88:	c2 c0       	rjmp	.+388    	; 0xe0e <train2+0x1c6>
     c8a:	88 24       	eor	r8, r8
     c8c:	99 24       	eor	r9, r9
			Mforward();
			ultra = US_read_distance('F');
			if( ultra <= 20)
			{
				Mstop();
				nextState = (currentState + 1) % STATES2 ;
     c8e:	66 24       	eor	r6, r6
     c90:	77 24       	eor	r7, r7
     c92:	68 94       	set
     c94:	63 f8       	bld	r6, 3
		if(prob <= epsilon){
			actionID = rand() % ACTIONS;
		}
		else
			actionID = getMax(currentState)._max_ind;
		reward = rewards2[currentState][actionID];
     c96:	0f 2e       	mov	r0, r31
     c98:	f0 e6       	ldi	r31, 0x60	; 96
     c9a:	4f 2e       	mov	r4, r31
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	5f 2e       	mov	r5, r31
     ca0:	f0 2d       	mov	r31, r0
		float prob = Q_random();
		if(prob <= epsilon){
			actionID = rand() % ACTIONS;
		}
		else
			actionID = getMax(currentState)._max_ind;
     ca2:	33 24       	eor	r3, r3
     ca4:	68 94       	set
     ca6:	33 f8       	bld	r3, 3
	//PORTB |= 1 << 4;
	for (int i = 0; i < episodes; i++) {
		ultra = 1000;
		while(1)
		{
			Mforward();
     ca8:	0e 94 82 03 	call	0x704	; 0x704 <Mforward>
			ultra = US_read_distance('F');
     cac:	86 e4       	ldi	r24, 0x46	; 70
     cae:	0e 94 31 09 	call	0x1262	; 0x1262 <US_read_distance>
     cb2:	90 e0       	ldi	r25, 0x00	; 0
			if( ultra <= 20)
     cb4:	85 31       	cpi	r24, 0x15	; 21
     cb6:	91 05       	cpc	r25, r1
     cb8:	bc f7       	brge	.-18     	; 0xca8 <train2+0x60>
			{
				Mstop();
     cba:	0e 94 6d 03 	call	0x6da	; 0x6da <Mstop>
				nextState = (currentState + 1) % STATES2 ;
     cbe:	80 91 6e 01 	lds	r24, 0x016E
     cc2:	90 91 6f 01 	lds	r25, 0x016F
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	b3 01       	movw	r22, r6
     cca:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__divmodhi4>
     cce:	90 93 6d 01 	sts	0x016D, r25
     cd2:	80 93 6c 01 	sts	0x016C, r24
				break;
			}
		}
		
		float prob = Q_random();
     cd6:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <Q_random>
		if(prob <= epsilon){
     cda:	20 91 e0 00 	lds	r18, 0x00E0
     cde:	30 91 e1 00 	lds	r19, 0x00E1
     ce2:	40 91 e2 00 	lds	r20, 0x00E2
     ce6:	50 91 e3 00 	lds	r21, 0x00E3
     cea:	0e 94 b1 09 	call	0x1362	; 0x1362 <__cmpsf2>
     cee:	18 16       	cp	r1, r24
     cf0:	5c f0       	brlt	.+22     	; 0xd08 <train2+0xc0>
			actionID = rand() % ACTIONS;
     cf2:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <rand>
     cf6:	64 e0       	ldi	r22, 0x04	; 4
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__divmodhi4>
     cfe:	90 93 6b 01 	sts	0x016B, r25
     d02:	80 93 6a 01 	sts	0x016A, r24
     d06:	23 c0       	rjmp	.+70     	; 0xd4e <train2+0x106>
		}
		else
			actionID = getMax(currentState)._max_ind;
     d08:	80 91 6e 01 	lds	r24, 0x016E
     d0c:	90 91 6f 01 	lds	r25, 0x016F
     d10:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <getMax>
     d14:	29 87       	std	Y+9, r18	; 0x09
     d16:	3a 87       	std	Y+10, r19	; 0x0a
     d18:	4b 87       	std	Y+11, r20	; 0x0b
     d1a:	5c 87       	std	Y+12, r21	; 0x0c
     d1c:	6d 87       	std	Y+13, r22	; 0x0d
     d1e:	7e 87       	std	Y+14, r23	; 0x0e
     d20:	8f 87       	std	Y+15, r24	; 0x0f
     d22:	98 8b       	std	Y+16, r25	; 0x10
     d24:	fe 01       	movw	r30, r28
     d26:	31 96       	adiw	r30, 0x01	; 1
     d28:	de 01       	movw	r26, r28
     d2a:	19 96       	adiw	r26, 0x09	; 9
     d2c:	83 2d       	mov	r24, r3
     d2e:	0d 90       	ld	r0, X+
     d30:	01 92       	st	Z+, r0
     d32:	81 50       	subi	r24, 0x01	; 1
     d34:	e1 f7       	brne	.-8      	; 0xd2e <train2+0xe6>
     d36:	6d 81       	ldd	r22, Y+5	; 0x05
     d38:	7e 81       	ldd	r23, Y+6	; 0x06
     d3a:	8f 81       	ldd	r24, Y+7	; 0x07
     d3c:	98 85       	ldd	r25, Y+8	; 0x08
     d3e:	0e 94 1d 0a 	call	0x143a	; 0x143a <__fixsfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	90 93 6b 01 	sts	0x016B, r25
     d4a:	80 93 6a 01 	sts	0x016A, r24
		reward = rewards2[currentState][actionID];
     d4e:	e0 90 6e 01 	lds	r14, 0x016E
     d52:	f0 90 6f 01 	lds	r15, 0x016F
     d56:	c0 90 6a 01 	lds	r12, 0x016A
     d5a:	d0 90 6b 01 	lds	r13, 0x016B
     d5e:	c7 01       	movw	r24, r14
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	8c 0d       	add	r24, r12
     d6a:	9d 1d       	adc	r25, r13
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	84 0d       	add	r24, r4
     d76:	95 1d       	adc	r25, r5
     d78:	dc 01       	movw	r26, r24
     d7a:	6d 91       	ld	r22, X+
     d7c:	7d 91       	ld	r23, X+
     d7e:	8d 91       	ld	r24, X+
     d80:	9c 91       	ld	r25, X
     d82:	60 93 7c 01 	sts	0x017C, r22
     d86:	70 93 7d 01 	sts	0x017D, r23
     d8a:	80 93 7e 01 	sts	0x017E, r24
     d8e:	90 93 7f 01 	sts	0x017F, r25
		update2(currentState, nextState, actionID, reward);
     d92:	a0 90 6c 01 	lds	r10, 0x016C
     d96:	b0 90 6d 01 	lds	r11, 0x016D
     d9a:	0e 94 1d 0a 	call	0x143a	; 0x143a <__fixsfsi>
     d9e:	8b 01       	movw	r16, r22
     da0:	9c 01       	movw	r18, r24
     da2:	c7 01       	movw	r24, r14
     da4:	b5 01       	movw	r22, r10
     da6:	a6 01       	movw	r20, r12
     da8:	98 01       	movw	r18, r16
     daa:	0e 94 63 05 	call	0xac6	; 0xac6 <update2>
		currentState = nextState;
     dae:	80 91 6c 01 	lds	r24, 0x016C
     db2:	90 91 6d 01 	lds	r25, 0x016D
     db6:	90 93 6f 01 	sts	0x016F, r25
     dba:	80 93 6e 01 	sts	0x016E, r24
		epsilon = decay(epsilon);
     dbe:	60 91 e0 00 	lds	r22, 0x00E0
     dc2:	70 91 e1 00 	lds	r23, 0x00E1
     dc6:	80 91 e2 00 	lds	r24, 0x00E2
     dca:	90 91 e3 00 	lds	r25, 0x00E3
     dce:	0e 94 17 04 	call	0x82e	; 0x82e <decay>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	80 93 e0 00 	sts	0x00E0, r24
     dda:	90 93 e1 00 	sts	0x00E1, r25
     dde:	a0 93 e2 00 	sts	0x00E2, r26
     de2:	b0 93 e3 00 	sts	0x00E3, r27
     de6:	8f ef       	ldi	r24, 0xFF	; 255
     de8:	90 e7       	ldi	r25, 0x70	; 112
     dea:	a2 e0       	ldi	r26, 0x02	; 2
     dec:	81 50       	subi	r24, 0x01	; 1
     dee:	90 40       	sbci	r25, 0x00	; 0
     df0:	a0 40       	sbci	r26, 0x00	; 0
     df2:	e1 f7       	brne	.-8      	; 0xdec <train2+0x1a4>
     df4:	00 c0       	rjmp	.+0      	; 0xdf6 <train2+0x1ae>
     df6:	00 00       	nop

void train2(){
	int ultra;
	//DDRA |= 1 << 4;
	//PORTB |= 1 << 4;
	for (int i = 0; i < episodes; i++) {
     df8:	08 94       	sec
     dfa:	81 1c       	adc	r8, r1
     dfc:	91 1c       	adc	r9, r1
     dfe:	80 91 e4 00 	lds	r24, 0x00E4
     e02:	90 91 e5 00 	lds	r25, 0x00E5
     e06:	88 16       	cp	r8, r24
     e08:	99 06       	cpc	r9, r25
     e0a:	0c f4       	brge	.+2      	; 0xe0e <train2+0x1c6>
     e0c:	4d cf       	rjmp	.-358    	; 0xca8 <train2+0x60>
		currentState = nextState;
		epsilon = decay(epsilon);
		_delay_ms(100);
	}
	//PORTB &= ~(1<<4); //close the LED
}
     e0e:	60 96       	adiw	r28, 0x10	; 16
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	df 90       	pop	r13
     e28:	cf 90       	pop	r12
     e2a:	bf 90       	pop	r11
     e2c:	af 90       	pop	r10
     e2e:	9f 90       	pop	r9
     e30:	8f 90       	pop	r8
     e32:	7f 90       	pop	r7
     e34:	6f 90       	pop	r6
     e36:	5f 90       	pop	r5
     e38:	4f 90       	pop	r4
     e3a:	3f 90       	pop	r3
     e3c:	08 95       	ret

00000e3e <train3>:

void train3(){ //interacting with the actual environment given to the robot
     e3e:	2f 92       	push	r2
     e40:	3f 92       	push	r3
     e42:	5f 92       	push	r5
     e44:	6f 92       	push	r6
     e46:	7f 92       	push	r7
     e48:	8f 92       	push	r8
     e4a:	9f 92       	push	r9
     e4c:	af 92       	push	r10
     e4e:	bf 92       	push	r11
     e50:	cf 92       	push	r12
     e52:	df 92       	push	r13
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	60 97       	sbiw	r28, 0x10	; 16
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
	
	//DDRB |= 1 << 4;
	//PORTB |= 1 << 4; //enable the blue LED (training phase)
	timer1_wave_fastPWM(1.89);
     e70:	65 e8       	ldi	r22, 0x85	; 133
     e72:	7b ee       	ldi	r23, 0xEB	; 235
     e74:	81 ef       	ldi	r24, 0xF1	; 241
     e76:	9f e3       	ldi	r25, 0x3F	; 63
     e78:	0e 94 a6 08 	call	0x114c	; 0x114c <timer1_wave_fastPWM>
	for (int i = 0; i < episodes; i++) {
     e7c:	80 91 e4 00 	lds	r24, 0x00E4
     e80:	90 91 e5 00 	lds	r25, 0x00E5
     e84:	18 16       	cp	r1, r24
     e86:	19 06       	cpc	r1, r25
     e88:	0c f4       	brge	.+2      	; 0xe8c <train3+0x4e>
     e8a:	d3 c0       	rjmp	.+422    	; 0x1032 <train3+0x1f4>
     e8c:	e2 c0       	rjmp	.+452    	; 0x1052 <train3+0x214>
		//Mforward();// make the robot move forward for each episode
		//do{
		//	currentState = getState(); // read the current state
		//} while (currentState == 0); //move till an obstacle is detected
		while(Read_F_distance() > 85){
				Mforward();
     e8e:	0e 94 82 03 	call	0x704	; 0x704 <Mforward>
	for (int i = 0; i < episodes; i++) {
		//Mforward();// make the robot move forward for each episode
		//do{
		//	currentState = getState(); // read the current state
		//} while (currentState == 0); //move till an obstacle is detected
		while(Read_F_distance() > 85){
     e92:	0e 94 0c 09 	call	0x1218	; 0x1218 <Read_F_distance>
     e96:	86 35       	cpi	r24, 0x56	; 86
     e98:	91 05       	cpc	r25, r1
     e9a:	cc f7       	brge	.-14     	; 0xe8e <train3+0x50>
				Mforward();
		}
		Mstop();
     e9c:	0e 94 6d 03 	call	0x6da	; 0x6da <Mstop>
		currentState = getState();
     ea0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <getState>
     ea4:	90 93 6f 01 	sts	0x016F, r25
     ea8:	80 93 6e 01 	sts	0x016E, r24
				
		float prob = Q_random(); //getting a probability for the explore/exploit action
     eac:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <Q_random>
		
		if(prob <= epsilon) //explore
     eb0:	20 91 e0 00 	lds	r18, 0x00E0
     eb4:	30 91 e1 00 	lds	r19, 0x00E1
     eb8:	40 91 e2 00 	lds	r20, 0x00E2
     ebc:	50 91 e3 00 	lds	r21, 0x00E3
     ec0:	0e 94 b1 09 	call	0x1362	; 0x1362 <__cmpsf2>
     ec4:	18 16       	cp	r1, r24
     ec6:	54 f0       	brlt	.+20     	; 0xedc <train3+0x9e>
			actionID = rand() % ACTIONS;
     ec8:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <rand>
     ecc:	b1 01       	movw	r22, r2
     ece:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__divmodhi4>
     ed2:	90 93 6b 01 	sts	0x016B, r25
     ed6:	80 93 6a 01 	sts	0x016A, r24
     eda:	23 c0       	rjmp	.+70     	; 0xf22 <train3+0xe4>
		else //exploit
			actionID = getMax(currentState)._max_ind;
     edc:	80 91 6e 01 	lds	r24, 0x016E
     ee0:	90 91 6f 01 	lds	r25, 0x016F
     ee4:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <getMax>
     ee8:	29 87       	std	Y+9, r18	; 0x09
     eea:	3a 87       	std	Y+10, r19	; 0x0a
     eec:	4b 87       	std	Y+11, r20	; 0x0b
     eee:	5c 87       	std	Y+12, r21	; 0x0c
     ef0:	6d 87       	std	Y+13, r22	; 0x0d
     ef2:	7e 87       	std	Y+14, r23	; 0x0e
     ef4:	8f 87       	std	Y+15, r24	; 0x0f
     ef6:	98 8b       	std	Y+16, r25	; 0x10
     ef8:	fe 01       	movw	r30, r28
     efa:	31 96       	adiw	r30, 0x01	; 1
     efc:	de 01       	movw	r26, r28
     efe:	19 96       	adiw	r26, 0x09	; 9
     f00:	85 2d       	mov	r24, r5
     f02:	0d 90       	ld	r0, X+
     f04:	01 92       	st	Z+, r0
     f06:	81 50       	subi	r24, 0x01	; 1
     f08:	e1 f7       	brne	.-8      	; 0xf02 <train3+0xc4>
     f0a:	6d 81       	ldd	r22, Y+5	; 0x05
     f0c:	7e 81       	ldd	r23, Y+6	; 0x06
     f0e:	8f 81       	ldd	r24, Y+7	; 0x07
     f10:	98 85       	ldd	r25, Y+8	; 0x08
     f12:	0e 94 1d 0a 	call	0x143a	; 0x143a <__fixsfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	90 93 6b 01 	sts	0x016B, r25
     f1e:	80 93 6a 01 	sts	0x016A, r24
		
		switch (actionID) //take the action
     f22:	80 91 6a 01 	lds	r24, 0x016A
     f26:	90 91 6b 01 	lds	r25, 0x016B
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	91 05       	cpc	r25, r1
     f2e:	c9 f0       	breq	.+50     	; 0xf62 <train3+0x124>
     f30:	82 30       	cpi	r24, 0x02	; 2
     f32:	91 05       	cpc	r25, r1
     f34:	1c f4       	brge	.+6      	; 0xf3c <train3+0xfe>
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	41 f0       	breq	.+16     	; 0xf4a <train3+0x10c>
     f3a:	1d c0       	rjmp	.+58     	; 0xf76 <train3+0x138>
     f3c:	82 30       	cpi	r24, 0x02	; 2
     f3e:	91 05       	cpc	r25, r1
     f40:	99 f0       	breq	.+38     	; 0xf68 <train3+0x12a>
     f42:	83 30       	cpi	r24, 0x03	; 3
     f44:	91 05       	cpc	r25, r1
     f46:	b9 f4       	brne	.+46     	; 0xf76 <train3+0x138>
     f48:	12 c0       	rjmp	.+36     	; 0xf6e <train3+0x130>
		{
			case 0 : Mforward();_delay_ms(50); break;
     f4a:	0e 94 82 03 	call	0x704	; 0x704 <Mforward>
     f4e:	8f e7       	ldi	r24, 0x7F	; 127
     f50:	98 e3       	ldi	r25, 0x38	; 56
     f52:	a1 e0       	ldi	r26, 0x01	; 1
     f54:	81 50       	subi	r24, 0x01	; 1
     f56:	90 40       	sbci	r25, 0x00	; 0
     f58:	a0 40       	sbci	r26, 0x00	; 0
     f5a:	e1 f7       	brne	.-8      	; 0xf54 <train3+0x116>
     f5c:	00 c0       	rjmp	.+0      	; 0xf5e <train3+0x120>
     f5e:	00 00       	nop
     f60:	0a c0       	rjmp	.+20     	; 0xf76 <train3+0x138>
			case 1 : Mleft(); break;
     f62:	0e 94 b4 03 	call	0x768	; 0x768 <Mleft>
     f66:	07 c0       	rjmp	.+14     	; 0xf76 <train3+0x138>
			case 2 : Mright(); break;
     f68:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Mright>
     f6c:	04 c0       	rjmp	.+8      	; 0xf76 <train3+0x138>
			case 3 : Mright();Mright(); break;
     f6e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Mright>
     f72:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Mright>
		}
		Mstop();
     f76:	0e 94 6d 03 	call	0x6da	; 0x6da <Mstop>
		nextState = getState(); // reading the new state
     f7a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <getState>
     f7e:	6c 01       	movw	r12, r24
     f80:	90 93 6d 01 	sts	0x016D, r25
     f84:	80 93 6c 01 	sts	0x016C, r24
		//Mstop();//stop the robot
		reward = rewards2[currentState][actionID]; //getting the reward
     f88:	e0 90 6e 01 	lds	r14, 0x016E
     f8c:	f0 90 6f 01 	lds	r15, 0x016F
     f90:	a0 90 6a 01 	lds	r10, 0x016A
     f94:	b0 90 6b 01 	lds	r11, 0x016B
     f98:	c7 01       	movw	r24, r14
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	8a 0d       	add	r24, r10
     fa4:	9b 1d       	adc	r25, r11
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	86 0d       	add	r24, r6
     fb0:	97 1d       	adc	r25, r7
     fb2:	dc 01       	movw	r26, r24
     fb4:	6d 91       	ld	r22, X+
     fb6:	7d 91       	ld	r23, X+
     fb8:	8d 91       	ld	r24, X+
     fba:	9c 91       	ld	r25, X
     fbc:	60 93 7c 01 	sts	0x017C, r22
     fc0:	70 93 7d 01 	sts	0x017D, r23
     fc4:	80 93 7e 01 	sts	0x017E, r24
     fc8:	90 93 7f 01 	sts	0x017F, r25
		update2(currentState, nextState, actionID, reward); //updating q table
     fcc:	0e 94 1d 0a 	call	0x143a	; 0x143a <__fixsfsi>
     fd0:	8b 01       	movw	r16, r22
     fd2:	9c 01       	movw	r18, r24
     fd4:	c7 01       	movw	r24, r14
     fd6:	b6 01       	movw	r22, r12
     fd8:	a5 01       	movw	r20, r10
     fda:	98 01       	movw	r18, r16
     fdc:	0e 94 63 05 	call	0xac6	; 0xac6 <update2>
		epsilon = decay(epsilon); // decay the epsilon (more toward exploiting)
     fe0:	60 91 e0 00 	lds	r22, 0x00E0
     fe4:	70 91 e1 00 	lds	r23, 0x00E1
     fe8:	80 91 e2 00 	lds	r24, 0x00E2
     fec:	90 91 e3 00 	lds	r25, 0x00E3
     ff0:	0e 94 17 04 	call	0x82e	; 0x82e <decay>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	80 93 e0 00 	sts	0x00E0, r24
     ffc:	90 93 e1 00 	sts	0x00E1, r25
    1000:	a0 93 e2 00 	sts	0x00E2, r26
    1004:	b0 93 e3 00 	sts	0x00E3, r27
    1008:	8f ef       	ldi	r24, 0xFF	; 255
    100a:	94 e3       	ldi	r25, 0x34	; 52
    100c:	ac e0       	ldi	r26, 0x0C	; 12
    100e:	81 50       	subi	r24, 0x01	; 1
    1010:	90 40       	sbci	r25, 0x00	; 0
    1012:	a0 40       	sbci	r26, 0x00	; 0
    1014:	e1 f7       	brne	.-8      	; 0x100e <train3+0x1d0>
    1016:	00 c0       	rjmp	.+0      	; 0x1018 <train3+0x1da>
    1018:	00 00       	nop
void train3(){ //interacting with the actual environment given to the robot
	
	//DDRB |= 1 << 4;
	//PORTB |= 1 << 4; //enable the blue LED (training phase)
	timer1_wave_fastPWM(1.89);
	for (int i = 0; i < episodes; i++) {
    101a:	08 94       	sec
    101c:	81 1c       	adc	r8, r1
    101e:	91 1c       	adc	r9, r1
    1020:	80 91 e4 00 	lds	r24, 0x00E4
    1024:	90 91 e5 00 	lds	r25, 0x00E5
    1028:	88 16       	cp	r8, r24
    102a:	99 06       	cpc	r9, r25
    102c:	0c f4       	brge	.+2      	; 0x1030 <train3+0x1f2>
    102e:	31 cf       	rjmp	.-414    	; 0xe92 <train3+0x54>
    1030:	10 c0       	rjmp	.+32     	; 0x1052 <train3+0x214>
    1032:	88 24       	eor	r8, r8
    1034:	99 24       	eor	r9, r9
			case 3 : Mright();Mright(); break;
		}
		Mstop();
		nextState = getState(); // reading the new state
		//Mstop();//stop the robot
		reward = rewards2[currentState][actionID]; //getting the reward
    1036:	0f 2e       	mov	r0, r31
    1038:	f0 e6       	ldi	r31, 0x60	; 96
    103a:	6f 2e       	mov	r6, r31
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	7f 2e       	mov	r7, r31
    1040:	f0 2d       	mov	r31, r0
		float prob = Q_random(); //getting a probability for the explore/exploit action
		
		if(prob <= epsilon) //explore
			actionID = rand() % ACTIONS;
		else //exploit
			actionID = getMax(currentState)._max_ind;
    1042:	55 24       	eor	r5, r5
    1044:	68 94       	set
    1046:	53 f8       	bld	r5, 3
		currentState = getState();
				
		float prob = Q_random(); //getting a probability for the explore/exploit action
		
		if(prob <= epsilon) //explore
			actionID = rand() % ACTIONS;
    1048:	22 24       	eor	r2, r2
    104a:	33 24       	eor	r3, r3
    104c:	68 94       	set
    104e:	22 f8       	bld	r2, 2
    1050:	20 cf       	rjmp	.-448    	; 0xe92 <train3+0x54>
		_delay_ms(500);	//**1
	}
	//PORTB &= ~(1<<4); //close the blue LED
	//DDRB |= 1 << 5;	  // enable the GREEN LED
	//PORTB |= 1 << 5;  // enable the GREEN LED
}
    1052:	60 96       	adiw	r28, 0x10	; 16
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	ff 90       	pop	r15
    1068:	ef 90       	pop	r14
    106a:	df 90       	pop	r13
    106c:	cf 90       	pop	r12
    106e:	bf 90       	pop	r11
    1070:	af 90       	pop	r10
    1072:	9f 90       	pop	r9
    1074:	8f 90       	pop	r8
    1076:	7f 90       	pop	r7
    1078:	6f 90       	pop	r6
    107a:	5f 90       	pop	r5
    107c:	3f 90       	pop	r3
    107e:	2f 90       	pop	r2
    1080:	08 95       	ret

00001082 <test2>:


void test2()
	{
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	60 97       	sbiw	r28, 0x10	; 16
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
			//while(getState() == 0) Forward(); can be used with train 3
			while(Read_F_distance() > 85){
				Mforward();
			}
			Mstop();
			actionID = getMax(getState())._max_ind;
    1096:	18 e0       	ldi	r17, 0x08	; 8
    1098:	02 c0       	rjmp	.+4      	; 0x109e <test2+0x1c>
	{
		while(1)
		{
			//while(getState() == 0) Forward(); can be used with train 3
			while(Read_F_distance() > 85){
				Mforward();
    109a:	0e 94 82 03 	call	0x704	; 0x704 <Mforward>
void test2()
	{
		while(1)
		{
			//while(getState() == 0) Forward(); can be used with train 3
			while(Read_F_distance() > 85){
    109e:	0e 94 0c 09 	call	0x1218	; 0x1218 <Read_F_distance>
    10a2:	86 35       	cpi	r24, 0x56	; 86
    10a4:	91 05       	cpc	r25, r1
    10a6:	cc f7       	brge	.-14     	; 0x109a <test2+0x18>
				Mforward();
			}
			Mstop();
    10a8:	0e 94 6d 03 	call	0x6da	; 0x6da <Mstop>
			actionID = getMax(getState())._max_ind;
    10ac:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <getState>
    10b0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <getMax>
    10b4:	29 87       	std	Y+9, r18	; 0x09
    10b6:	3a 87       	std	Y+10, r19	; 0x0a
    10b8:	4b 87       	std	Y+11, r20	; 0x0b
    10ba:	5c 87       	std	Y+12, r21	; 0x0c
    10bc:	6d 87       	std	Y+13, r22	; 0x0d
    10be:	7e 87       	std	Y+14, r23	; 0x0e
    10c0:	8f 87       	std	Y+15, r24	; 0x0f
    10c2:	98 8b       	std	Y+16, r25	; 0x10
    10c4:	de 01       	movw	r26, r28
    10c6:	11 96       	adiw	r26, 0x01	; 1
    10c8:	fe 01       	movw	r30, r28
    10ca:	39 96       	adiw	r30, 0x09	; 9
    10cc:	81 2f       	mov	r24, r17
    10ce:	01 90       	ld	r0, Z+
    10d0:	0d 92       	st	X+, r0
    10d2:	81 50       	subi	r24, 0x01	; 1
    10d4:	e1 f7       	brne	.-8      	; 0x10ce <test2+0x4c>
    10d6:	6d 81       	ldd	r22, Y+5	; 0x05
    10d8:	7e 81       	ldd	r23, Y+6	; 0x06
    10da:	8f 81       	ldd	r24, Y+7	; 0x07
    10dc:	98 85       	ldd	r25, Y+8	; 0x08
    10de:	0e 94 1d 0a 	call	0x143a	; 0x143a <__fixsfsi>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	90 93 6b 01 	sts	0x016B, r25
    10ea:	80 93 6a 01 	sts	0x016A, r24
			
			//if(actionID == 0){ //forward
				//Mforward(); 
			//}
			if(actionID == 1){ // left
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	91 05       	cpc	r25, r1
    10f2:	19 f4       	brne	.+6      	; 0x10fa <test2+0x78>
				Mleft(); 
    10f4:	0e 94 b4 03 	call	0x768	; 0x768 <Mleft>
    10f8:	d2 cf       	rjmp	.-92     	; 0x109e <test2+0x1c>
			}
			else if(actionID == 2){ // right
    10fa:	82 30       	cpi	r24, 0x02	; 2
    10fc:	91 05       	cpc	r25, r1
    10fe:	19 f4       	brne	.+6      	; 0x1106 <test2+0x84>
				Mright();
    1100:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Mright>
    1104:	cc cf       	rjmp	.-104    	; 0x109e <test2+0x1c>
			}
			else if(actionID == 3) // rotate
    1106:	83 30       	cpi	r24, 0x03	; 3
    1108:	91 05       	cpc	r25, r1
    110a:	29 f4       	brne	.+10     	; 0x1116 <test2+0x94>
			{
				Mright();
    110c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Mright>
				Mright();
    1110:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Mright>
    1114:	c4 cf       	rjmp	.-120    	; 0x109e <test2+0x1c>
			}
			else  { //not a case
				Mstop();
    1116:	0e 94 6d 03 	call	0x6da	; 0x6da <Mstop>
    111a:	8f ef       	ldi	r24, 0xFF	; 255
    111c:	9d e3       	ldi	r25, 0x3D	; 61
    111e:	a9 e4       	ldi	r26, 0x49	; 73
    1120:	81 50       	subi	r24, 0x01	; 1
    1122:	90 40       	sbci	r25, 0x00	; 0
    1124:	a0 40       	sbci	r26, 0x00	; 0
    1126:	e1 f7       	brne	.-8      	; 0x1120 <test2+0x9e>
    1128:	00 c0       	rjmp	.+0      	; 0x112a <test2+0xa8>
    112a:	00 00       	nop
    112c:	b8 cf       	rjmp	.-144    	; 0x109e <test2+0x1c>

0000112e <timer_CTC_init_interrupt>:
#define F_CPU 8000000ul
#include <util/delay.h>
void timer_CTC_init_interrupt(void)
{
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM00);
    112e:	83 b7       	in	r24, 0x33	; 51
    1130:	80 64       	ori	r24, 0x40	; 64
    1132:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=80;
    1134:	80 e5       	ldi	r24, 0x50	; 80
    1136:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock  1024 */
	SET_BIT(TCCR0,CS00);
    1138:	83 b7       	in	r24, 0x33	; 51
    113a:	81 60       	ori	r24, 0x01	; 1
    113c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    113e:	83 b7       	in	r24, 0x33	; 51
    1140:	84 60       	ori	r24, 0x04	; 4
    1142:	83 bf       	out	0x33, r24	; 51
	/* enable interrupt*/
	SET_BIT(TIMSK,OCIE0);
    1144:	89 b7       	in	r24, 0x39	; 57
    1146:	82 60       	ori	r24, 0x02	; 2
    1148:	89 bf       	out	0x39, r24	; 57
}
    114a:	08 95       	ret

0000114c <timer1_wave_fastPWM>:
void timer1_wave_fastPWM(double value)
{
	TCCR1A=0X00;
    114c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0X00;
    114e:	1e bc       	out	0x2e, r1	; 46
	/*set oc1a AS output pin*/
	SET_BIT(DDRD,5);
    1150:	8d 9a       	sbi	0x11, 5	; 17
	/* select fast Pwm mode */
	SET_BIT(TCCR1A,WGM11);
    1152:	2f b5       	in	r18, 0x2f	; 47
    1154:	22 60       	ori	r18, 0x02	; 2
    1156:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
    1158:	2e b5       	in	r18, 0x2e	; 46
    115a:	28 60       	ori	r18, 0x08	; 8
    115c:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
    115e:	2e b5       	in	r18, 0x2e	; 46
    1160:	20 61       	ori	r18, 0x10	; 16
    1162:	2e bd       	out	0x2e, r18	; 46
	/* load a value in OCR1A,ICR1 */
	OCR1A=value*1000;
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	4a e7       	ldi	r20, 0x7A	; 122
    116a:	54 e4       	ldi	r21, 0x44	; 68
    116c:	0e 94 04 0b 	call	0x1608	; 0x1608 <__mulsf3>
    1170:	0e 94 22 0a 	call	0x1444	; 0x1444 <__fixunssfsi>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	9b bd       	out	0x2b, r25	; 43
    117a:	8a bd       	out	0x2a, r24	; 42
	ICR1=19999;
    117c:	8f e1       	ldi	r24, 0x1F	; 31
    117e:	9e e4       	ldi	r25, 0x4E	; 78
    1180:	97 bd       	out	0x27, r25	; 39
    1182:	86 bd       	out	0x26, r24	; 38
	/* select prescaling    /8    */
	CLR_BIT(TCCR1B,CS10);
    1184:	8e b5       	in	r24, 0x2e	; 46
    1186:	8e 7f       	andi	r24, 0xFE	; 254
    1188:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,CS11);
    118a:	8e b5       	in	r24, 0x2e	; 46
    118c:	82 60       	ori	r24, 0x02	; 2
    118e:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS12);
    1190:	8e b5       	in	r24, 0x2e	; 46
    1192:	8b 7f       	andi	r24, 0xFB	; 251
    1194:	8e bd       	out	0x2e, r24	; 46

	/*clear OC1A on  compare,set on top*/
	CLR_BIT(TCCR1A,COM1A0);
    1196:	8f b5       	in	r24, 0x2f	; 47
    1198:	8f 7b       	andi	r24, 0xBF	; 191
    119a:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,COM1A1);
    119c:	8f b5       	in	r24, 0x2f	; 47
    119e:	80 68       	ori	r24, 0x80	; 128
    11a0:	8f bd       	out	0x2f, r24	; 47
    11a2:	8f ef       	ldi	r24, 0xFF	; 255
    11a4:	95 ea       	ldi	r25, 0xA5	; 165
    11a6:	ae e0       	ldi	r26, 0x0E	; 14
    11a8:	81 50       	subi	r24, 0x01	; 1
    11aa:	90 40       	sbci	r25, 0x00	; 0
    11ac:	a0 40       	sbci	r26, 0x00	; 0
    11ae:	e1 f7       	brne	.-8      	; 0x11a8 <timer1_wave_fastPWM+0x5c>
    11b0:	00 c0       	rjmp	.+0      	; 0x11b2 <timer1_wave_fastPWM+0x66>
    11b2:	00 00       	nop
	// 20 MS  BUT TO SWITCH
	_delay_ms(600);
	//CLR_BIT(DDRD,5);	
}
    11b4:	08 95       	ret

000011b6 <timer0_wave_fastPWM>:
void timer0_wave_fastPWM(char dutyCycle) //(0-->100) %
{
    11b6:	cf 93       	push	r28
    11b8:	c8 2f       	mov	r28, r24
	DIO_vsetPINDir('B',3,1);
    11ba:	82 e4       	ldi	r24, 0x42	; 66
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	63 e0       	ldi	r22, 0x03	; 3
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	41 e0       	ldi	r20, 0x01	; 1
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_vsetPINDir>
	
	//fast pwm
	SET_BIT(TCCR0,WGM00);
    11ca:	83 b7       	in	r24, 0x33	; 51
    11cc:	80 64       	ori	r24, 0x40	; 64
    11ce:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
    11d0:	83 b7       	in	r24, 0x33	; 51
    11d2:	88 60       	ori	r24, 0x08	; 8
    11d4:	83 bf       	out	0x33, r24	; 51
	// duty=(OCR0/256)X100
	OCR0=(dutyCycle*256)/100;
    11d6:	3c 2f       	mov	r19, r28
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	c9 01       	movw	r24, r18
    11dc:	64 e6       	ldi	r22, 0x64	; 100
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__divmodhi4>
    11e4:	6c bf       	out	0x3c, r22	; 60
	//PRESCALLER   /64
	SET_BIT(TCCR0,CS00);
    11e6:	83 b7       	in	r24, 0x33	; 51
    11e8:	81 60       	ori	r24, 0x01	; 1
    11ea:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS01);
    11ec:	83 b7       	in	r24, 0x33	; 51
    11ee:	82 60       	ori	r24, 0x02	; 2
    11f0:	83 bf       	out	0x33, r24	; 51
	// Clear OC0 on compare match, set OC0 at TOP
	CLR_BIT(TCCR0,COM00);
    11f2:	83 b7       	in	r24, 0x33	; 51
    11f4:	8f 7e       	andi	r24, 0xEF	; 239
    11f6:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
    11f8:	83 b7       	in	r24, 0x33	; 51
    11fa:	80 62       	ori	r24, 0x20	; 32
    11fc:	83 bf       	out	0x33, r24	; 51
	
}
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret

00001202 <US_init>:
#include "timer.h";
#include <avr/io.h>
void US_init()
{
		//ultra sonic INTI
		DIO_vsetPINDir('a',3,1);
    1202:	81 e6       	ldi	r24, 0x61	; 97
    1204:	63 e0       	ldi	r22, 0x03	; 3
    1206:	41 e0       	ldi	r20, 0x01	; 1
    1208:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_vsetPINDir>
		DIO_vsetPINDir('D',6,0);
    120c:	84 e4       	ldi	r24, 0x44	; 68
    120e:	66 e0       	ldi	r22, 0x06	; 6
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	0e 94 4d 00 	call	0x9a	; 0x9a <DIO_vsetPINDir>
}
    1216:	08 95       	ret

00001218 <Read_F_distance>:

int Read_F_distance(){
	int a,b,high;
	int distance;
	
	DIO_write_pin('a',3,1);
    1218:	81 e6       	ldi	r24, 0x61	; 97
    121a:	63 e0       	ldi	r22, 0x03	; 3
    121c:	41 e0       	ldi	r20, 0x01	; 1
    121e:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1222:	25 e8       	ldi	r18, 0x85	; 133
    1224:	2a 95       	dec	r18
    1226:	f1 f7       	brne	.-4      	; 0x1224 <Read_F_distance+0xc>
    1228:	00 00       	nop
	_delay_us(50);
	DIO_write_pin('a',3,0);
    122a:	81 e6       	ldi	r24, 0x61	; 97
    122c:	63 e0       	ldi	r22, 0x03	; 3
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write_pin>
	
	int count =0;
	while((PIND & (1<<6)) >> 6 == 0);
    1234:	86 9b       	sbis	0x10, 6	; 16
    1236:	fe cf       	rjmp	.-4      	; 0x1234 <Read_F_distance+0x1c>
	//calculate the ECHO time
	while((PIND& (1<<6)) >>6 == 1){
    1238:	86 9b       	sbis	0x10, 6	; 16
    123a:	0a c0       	rjmp	.+20     	; 0x1250 <Read_F_distance+0x38>
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	22 e0       	ldi	r18, 0x02	; 2
    1242:	2a 95       	dec	r18
    1244:	f1 f7       	brne	.-4      	; 0x1242 <Read_F_distance+0x2a>
    1246:	00 c0       	rjmp	.+0      	; 0x1248 <Read_F_distance+0x30>
		// Converting The Counts To Microseconds Variable
		_delay_us(1);
		count++;
    1248:	01 96       	adiw	r24, 0x01	; 1
	DIO_write_pin('a',3,0);
	
	int count =0;
	while((PIND & (1<<6)) >> 6 == 0);
	//calculate the ECHO time
	while((PIND& (1<<6)) >>6 == 1){
    124a:	86 99       	sbic	0x10, 6	; 16
    124c:	f9 cf       	rjmp	.-14     	; 0x1240 <Read_F_distance+0x28>
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <Read_F_distance+0x3c>
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	90 e0       	ldi	r25, 0x00	; 0
		// Converting The Counts To Microseconds Variable
		_delay_us(1);
		count++;
	}
	distance = count/9;					// Distance Equation.
    1254:	69 e0       	ldi	r22, 0x09	; 9
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__divmodhi4>
    125c:	86 2f       	mov	r24, r22
    125e:	97 2f       	mov	r25, r23
	// FORWOARD
	//timer1_wave_fastPWM(1.89);
	return distance;
    1260:	08 95       	ret

00001262 <US_read_distance>:
		DIO_vsetPINDir('a',3,1);
		DIO_vsetPINDir('D',6,0);
}
int US_read_distance(char direction)
{
	if(direction=='F')
    1262:	86 34       	cpi	r24, 0x46	; 70
    1264:	39 f4       	brne	.+14     	; 0x1274 <US_read_distance+0x12>
	{
		timer1_wave_fastPWM(1.89);
    1266:	65 e8       	ldi	r22, 0x85	; 133
    1268:	7b ee       	ldi	r23, 0xEB	; 235
    126a:	81 ef       	ldi	r24, 0xF1	; 241
    126c:	9f e3       	ldi	r25, 0x3F	; 63
    126e:	0e 94 a6 08 	call	0x114c	; 0x114c <timer1_wave_fastPWM>
    1272:	0f c0       	rjmp	.+30     	; 0x1292 <US_read_distance+0x30>
	}			
	else if (direction=='R')
    1274:	82 35       	cpi	r24, 0x52	; 82
    1276:	39 f4       	brne	.+14     	; 0x1286 <US_read_distance+0x24>
	{
		timer1_wave_fastPWM(0.95);
    1278:	63 e3       	ldi	r22, 0x33	; 51
    127a:	73 e3       	ldi	r23, 0x33	; 51
    127c:	83 e7       	ldi	r24, 0x73	; 115
    127e:	9f e3       	ldi	r25, 0x3F	; 63
    1280:	0e 94 a6 08 	call	0x114c	; 0x114c <timer1_wave_fastPWM>
    1284:	06 c0       	rjmp	.+12     	; 0x1292 <US_read_distance+0x30>
	}
	else
	{
		timer1_wave_fastPWM(2.7);	
    1286:	6d ec       	ldi	r22, 0xCD	; 205
    1288:	7c ec       	ldi	r23, 0xCC	; 204
    128a:	8c e2       	ldi	r24, 0x2C	; 44
    128c:	90 e4       	ldi	r25, 0x40	; 64
    128e:	0e 94 a6 08 	call	0x114c	; 0x114c <timer1_wave_fastPWM>
	}
	int distance = Read_F_distance();
    1292:	0e 94 0c 09 	call	0x1218	; 0x1218 <Read_F_distance>
	return distance;
}
    1296:	08 95       	ret

00001298 <__subsf3>:
    1298:	50 58       	subi	r21, 0x80	; 128

0000129a <__addsf3>:
    129a:	bb 27       	eor	r27, r27
    129c:	aa 27       	eor	r26, r26
    129e:	0e d0       	rcall	.+28     	; 0x12bc <__addsf3x>
    12a0:	75 c1       	rjmp	.+746    	; 0x158c <__fp_round>
    12a2:	66 d1       	rcall	.+716    	; 0x1570 <__fp_pscA>
    12a4:	30 f0       	brcs	.+12     	; 0x12b2 <__addsf3+0x18>
    12a6:	6b d1       	rcall	.+726    	; 0x157e <__fp_pscB>
    12a8:	20 f0       	brcs	.+8      	; 0x12b2 <__addsf3+0x18>
    12aa:	31 f4       	brne	.+12     	; 0x12b8 <__addsf3+0x1e>
    12ac:	9f 3f       	cpi	r25, 0xFF	; 255
    12ae:	11 f4       	brne	.+4      	; 0x12b4 <__addsf3+0x1a>
    12b0:	1e f4       	brtc	.+6      	; 0x12b8 <__addsf3+0x1e>
    12b2:	5b c1       	rjmp	.+694    	; 0x156a <__fp_nan>
    12b4:	0e f4       	brtc	.+2      	; 0x12b8 <__addsf3+0x1e>
    12b6:	e0 95       	com	r30
    12b8:	e7 fb       	bst	r30, 7
    12ba:	51 c1       	rjmp	.+674    	; 0x155e <__fp_inf>

000012bc <__addsf3x>:
    12bc:	e9 2f       	mov	r30, r25
    12be:	77 d1       	rcall	.+750    	; 0x15ae <__fp_split3>
    12c0:	80 f3       	brcs	.-32     	; 0x12a2 <__addsf3+0x8>
    12c2:	ba 17       	cp	r27, r26
    12c4:	62 07       	cpc	r22, r18
    12c6:	73 07       	cpc	r23, r19
    12c8:	84 07       	cpc	r24, r20
    12ca:	95 07       	cpc	r25, r21
    12cc:	18 f0       	brcs	.+6      	; 0x12d4 <__addsf3x+0x18>
    12ce:	71 f4       	brne	.+28     	; 0x12ec <__addsf3x+0x30>
    12d0:	9e f5       	brtc	.+102    	; 0x1338 <__addsf3x+0x7c>
    12d2:	8f c1       	rjmp	.+798    	; 0x15f2 <__fp_zero>
    12d4:	0e f4       	brtc	.+2      	; 0x12d8 <__addsf3x+0x1c>
    12d6:	e0 95       	com	r30
    12d8:	0b 2e       	mov	r0, r27
    12da:	ba 2f       	mov	r27, r26
    12dc:	a0 2d       	mov	r26, r0
    12de:	0b 01       	movw	r0, r22
    12e0:	b9 01       	movw	r22, r18
    12e2:	90 01       	movw	r18, r0
    12e4:	0c 01       	movw	r0, r24
    12e6:	ca 01       	movw	r24, r20
    12e8:	a0 01       	movw	r20, r0
    12ea:	11 24       	eor	r1, r1
    12ec:	ff 27       	eor	r31, r31
    12ee:	59 1b       	sub	r21, r25
    12f0:	99 f0       	breq	.+38     	; 0x1318 <__addsf3x+0x5c>
    12f2:	59 3f       	cpi	r21, 0xF9	; 249
    12f4:	50 f4       	brcc	.+20     	; 0x130a <__addsf3x+0x4e>
    12f6:	50 3e       	cpi	r21, 0xE0	; 224
    12f8:	68 f1       	brcs	.+90     	; 0x1354 <__addsf3x+0x98>
    12fa:	1a 16       	cp	r1, r26
    12fc:	f0 40       	sbci	r31, 0x00	; 0
    12fe:	a2 2f       	mov	r26, r18
    1300:	23 2f       	mov	r18, r19
    1302:	34 2f       	mov	r19, r20
    1304:	44 27       	eor	r20, r20
    1306:	58 5f       	subi	r21, 0xF8	; 248
    1308:	f3 cf       	rjmp	.-26     	; 0x12f0 <__addsf3x+0x34>
    130a:	46 95       	lsr	r20
    130c:	37 95       	ror	r19
    130e:	27 95       	ror	r18
    1310:	a7 95       	ror	r26
    1312:	f0 40       	sbci	r31, 0x00	; 0
    1314:	53 95       	inc	r21
    1316:	c9 f7       	brne	.-14     	; 0x130a <__addsf3x+0x4e>
    1318:	7e f4       	brtc	.+30     	; 0x1338 <__addsf3x+0x7c>
    131a:	1f 16       	cp	r1, r31
    131c:	ba 0b       	sbc	r27, r26
    131e:	62 0b       	sbc	r22, r18
    1320:	73 0b       	sbc	r23, r19
    1322:	84 0b       	sbc	r24, r20
    1324:	ba f0       	brmi	.+46     	; 0x1354 <__addsf3x+0x98>
    1326:	91 50       	subi	r25, 0x01	; 1
    1328:	a1 f0       	breq	.+40     	; 0x1352 <__addsf3x+0x96>
    132a:	ff 0f       	add	r31, r31
    132c:	bb 1f       	adc	r27, r27
    132e:	66 1f       	adc	r22, r22
    1330:	77 1f       	adc	r23, r23
    1332:	88 1f       	adc	r24, r24
    1334:	c2 f7       	brpl	.-16     	; 0x1326 <__addsf3x+0x6a>
    1336:	0e c0       	rjmp	.+28     	; 0x1354 <__addsf3x+0x98>
    1338:	ba 0f       	add	r27, r26
    133a:	62 1f       	adc	r22, r18
    133c:	73 1f       	adc	r23, r19
    133e:	84 1f       	adc	r24, r20
    1340:	48 f4       	brcc	.+18     	; 0x1354 <__addsf3x+0x98>
    1342:	87 95       	ror	r24
    1344:	77 95       	ror	r23
    1346:	67 95       	ror	r22
    1348:	b7 95       	ror	r27
    134a:	f7 95       	ror	r31
    134c:	9e 3f       	cpi	r25, 0xFE	; 254
    134e:	08 f0       	brcs	.+2      	; 0x1352 <__addsf3x+0x96>
    1350:	b3 cf       	rjmp	.-154    	; 0x12b8 <__addsf3+0x1e>
    1352:	93 95       	inc	r25
    1354:	88 0f       	add	r24, r24
    1356:	08 f0       	brcs	.+2      	; 0x135a <__addsf3x+0x9e>
    1358:	99 27       	eor	r25, r25
    135a:	ee 0f       	add	r30, r30
    135c:	97 95       	ror	r25
    135e:	87 95       	ror	r24
    1360:	08 95       	ret

00001362 <__cmpsf2>:
    1362:	d9 d0       	rcall	.+434    	; 0x1516 <__fp_cmp>
    1364:	08 f4       	brcc	.+2      	; 0x1368 <__cmpsf2+0x6>
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	08 95       	ret

0000136a <__divsf3>:
    136a:	0c d0       	rcall	.+24     	; 0x1384 <__divsf3x>
    136c:	0f c1       	rjmp	.+542    	; 0x158c <__fp_round>
    136e:	07 d1       	rcall	.+526    	; 0x157e <__fp_pscB>
    1370:	40 f0       	brcs	.+16     	; 0x1382 <__divsf3+0x18>
    1372:	fe d0       	rcall	.+508    	; 0x1570 <__fp_pscA>
    1374:	30 f0       	brcs	.+12     	; 0x1382 <__divsf3+0x18>
    1376:	21 f4       	brne	.+8      	; 0x1380 <__divsf3+0x16>
    1378:	5f 3f       	cpi	r21, 0xFF	; 255
    137a:	19 f0       	breq	.+6      	; 0x1382 <__divsf3+0x18>
    137c:	f0 c0       	rjmp	.+480    	; 0x155e <__fp_inf>
    137e:	51 11       	cpse	r21, r1
    1380:	39 c1       	rjmp	.+626    	; 0x15f4 <__fp_szero>
    1382:	f3 c0       	rjmp	.+486    	; 0x156a <__fp_nan>

00001384 <__divsf3x>:
    1384:	14 d1       	rcall	.+552    	; 0x15ae <__fp_split3>
    1386:	98 f3       	brcs	.-26     	; 0x136e <__divsf3+0x4>

00001388 <__divsf3_pse>:
    1388:	99 23       	and	r25, r25
    138a:	c9 f3       	breq	.-14     	; 0x137e <__divsf3+0x14>
    138c:	55 23       	and	r21, r21
    138e:	b1 f3       	breq	.-20     	; 0x137c <__divsf3+0x12>
    1390:	95 1b       	sub	r25, r21
    1392:	55 0b       	sbc	r21, r21
    1394:	bb 27       	eor	r27, r27
    1396:	aa 27       	eor	r26, r26
    1398:	62 17       	cp	r22, r18
    139a:	73 07       	cpc	r23, r19
    139c:	84 07       	cpc	r24, r20
    139e:	38 f0       	brcs	.+14     	; 0x13ae <__divsf3_pse+0x26>
    13a0:	9f 5f       	subi	r25, 0xFF	; 255
    13a2:	5f 4f       	sbci	r21, 0xFF	; 255
    13a4:	22 0f       	add	r18, r18
    13a6:	33 1f       	adc	r19, r19
    13a8:	44 1f       	adc	r20, r20
    13aa:	aa 1f       	adc	r26, r26
    13ac:	a9 f3       	breq	.-22     	; 0x1398 <__divsf3_pse+0x10>
    13ae:	33 d0       	rcall	.+102    	; 0x1416 <__divsf3_pse+0x8e>
    13b0:	0e 2e       	mov	r0, r30
    13b2:	3a f0       	brmi	.+14     	; 0x13c2 <__divsf3_pse+0x3a>
    13b4:	e0 e8       	ldi	r30, 0x80	; 128
    13b6:	30 d0       	rcall	.+96     	; 0x1418 <__divsf3_pse+0x90>
    13b8:	91 50       	subi	r25, 0x01	; 1
    13ba:	50 40       	sbci	r21, 0x00	; 0
    13bc:	e6 95       	lsr	r30
    13be:	00 1c       	adc	r0, r0
    13c0:	ca f7       	brpl	.-14     	; 0x13b4 <__divsf3_pse+0x2c>
    13c2:	29 d0       	rcall	.+82     	; 0x1416 <__divsf3_pse+0x8e>
    13c4:	fe 2f       	mov	r31, r30
    13c6:	27 d0       	rcall	.+78     	; 0x1416 <__divsf3_pse+0x8e>
    13c8:	66 0f       	add	r22, r22
    13ca:	77 1f       	adc	r23, r23
    13cc:	88 1f       	adc	r24, r24
    13ce:	bb 1f       	adc	r27, r27
    13d0:	26 17       	cp	r18, r22
    13d2:	37 07       	cpc	r19, r23
    13d4:	48 07       	cpc	r20, r24
    13d6:	ab 07       	cpc	r26, r27
    13d8:	b0 e8       	ldi	r27, 0x80	; 128
    13da:	09 f0       	breq	.+2      	; 0x13de <__divsf3_pse+0x56>
    13dc:	bb 0b       	sbc	r27, r27
    13de:	80 2d       	mov	r24, r0
    13e0:	bf 01       	movw	r22, r30
    13e2:	ff 27       	eor	r31, r31
    13e4:	93 58       	subi	r25, 0x83	; 131
    13e6:	5f 4f       	sbci	r21, 0xFF	; 255
    13e8:	2a f0       	brmi	.+10     	; 0x13f4 <__divsf3_pse+0x6c>
    13ea:	9e 3f       	cpi	r25, 0xFE	; 254
    13ec:	51 05       	cpc	r21, r1
    13ee:	68 f0       	brcs	.+26     	; 0x140a <__divsf3_pse+0x82>
    13f0:	b6 c0       	rjmp	.+364    	; 0x155e <__fp_inf>
    13f2:	00 c1       	rjmp	.+512    	; 0x15f4 <__fp_szero>
    13f4:	5f 3f       	cpi	r21, 0xFF	; 255
    13f6:	ec f3       	brlt	.-6      	; 0x13f2 <__divsf3_pse+0x6a>
    13f8:	98 3e       	cpi	r25, 0xE8	; 232
    13fa:	dc f3       	brlt	.-10     	; 0x13f2 <__divsf3_pse+0x6a>
    13fc:	86 95       	lsr	r24
    13fe:	77 95       	ror	r23
    1400:	67 95       	ror	r22
    1402:	b7 95       	ror	r27
    1404:	f7 95       	ror	r31
    1406:	9f 5f       	subi	r25, 0xFF	; 255
    1408:	c9 f7       	brne	.-14     	; 0x13fc <__divsf3_pse+0x74>
    140a:	88 0f       	add	r24, r24
    140c:	91 1d       	adc	r25, r1
    140e:	96 95       	lsr	r25
    1410:	87 95       	ror	r24
    1412:	97 f9       	bld	r25, 7
    1414:	08 95       	ret
    1416:	e1 e0       	ldi	r30, 0x01	; 1
    1418:	66 0f       	add	r22, r22
    141a:	77 1f       	adc	r23, r23
    141c:	88 1f       	adc	r24, r24
    141e:	bb 1f       	adc	r27, r27
    1420:	62 17       	cp	r22, r18
    1422:	73 07       	cpc	r23, r19
    1424:	84 07       	cpc	r24, r20
    1426:	ba 07       	cpc	r27, r26
    1428:	20 f0       	brcs	.+8      	; 0x1432 <__divsf3_pse+0xaa>
    142a:	62 1b       	sub	r22, r18
    142c:	73 0b       	sbc	r23, r19
    142e:	84 0b       	sbc	r24, r20
    1430:	ba 0b       	sbc	r27, r26
    1432:	ee 1f       	adc	r30, r30
    1434:	88 f7       	brcc	.-30     	; 0x1418 <__divsf3_pse+0x90>
    1436:	e0 95       	com	r30
    1438:	08 95       	ret

0000143a <__fixsfsi>:
    143a:	04 d0       	rcall	.+8      	; 0x1444 <__fixunssfsi>
    143c:	68 94       	set
    143e:	b1 11       	cpse	r27, r1
    1440:	d9 c0       	rjmp	.+434    	; 0x15f4 <__fp_szero>
    1442:	08 95       	ret

00001444 <__fixunssfsi>:
    1444:	bc d0       	rcall	.+376    	; 0x15be <__fp_splitA>
    1446:	88 f0       	brcs	.+34     	; 0x146a <__fixunssfsi+0x26>
    1448:	9f 57       	subi	r25, 0x7F	; 127
    144a:	90 f0       	brcs	.+36     	; 0x1470 <__fixunssfsi+0x2c>
    144c:	b9 2f       	mov	r27, r25
    144e:	99 27       	eor	r25, r25
    1450:	b7 51       	subi	r27, 0x17	; 23
    1452:	a0 f0       	brcs	.+40     	; 0x147c <__fixunssfsi+0x38>
    1454:	d1 f0       	breq	.+52     	; 0x148a <__fixunssfsi+0x46>
    1456:	66 0f       	add	r22, r22
    1458:	77 1f       	adc	r23, r23
    145a:	88 1f       	adc	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	1a f0       	brmi	.+6      	; 0x1466 <__fixunssfsi+0x22>
    1460:	ba 95       	dec	r27
    1462:	c9 f7       	brne	.-14     	; 0x1456 <__fixunssfsi+0x12>
    1464:	12 c0       	rjmp	.+36     	; 0x148a <__fixunssfsi+0x46>
    1466:	b1 30       	cpi	r27, 0x01	; 1
    1468:	81 f0       	breq	.+32     	; 0x148a <__fixunssfsi+0x46>
    146a:	c3 d0       	rcall	.+390    	; 0x15f2 <__fp_zero>
    146c:	b1 e0       	ldi	r27, 0x01	; 1
    146e:	08 95       	ret
    1470:	c0 c0       	rjmp	.+384    	; 0x15f2 <__fp_zero>
    1472:	67 2f       	mov	r22, r23
    1474:	78 2f       	mov	r23, r24
    1476:	88 27       	eor	r24, r24
    1478:	b8 5f       	subi	r27, 0xF8	; 248
    147a:	39 f0       	breq	.+14     	; 0x148a <__fixunssfsi+0x46>
    147c:	b9 3f       	cpi	r27, 0xF9	; 249
    147e:	cc f3       	brlt	.-14     	; 0x1472 <__fixunssfsi+0x2e>
    1480:	86 95       	lsr	r24
    1482:	77 95       	ror	r23
    1484:	67 95       	ror	r22
    1486:	b3 95       	inc	r27
    1488:	d9 f7       	brne	.-10     	; 0x1480 <__fixunssfsi+0x3c>
    148a:	3e f4       	brtc	.+14     	; 0x149a <__fixunssfsi+0x56>
    148c:	90 95       	com	r25
    148e:	80 95       	com	r24
    1490:	70 95       	com	r23
    1492:	61 95       	neg	r22
    1494:	7f 4f       	sbci	r23, 0xFF	; 255
    1496:	8f 4f       	sbci	r24, 0xFF	; 255
    1498:	9f 4f       	sbci	r25, 0xFF	; 255
    149a:	08 95       	ret

0000149c <__floatunsisf>:
    149c:	e8 94       	clt
    149e:	09 c0       	rjmp	.+18     	; 0x14b2 <__floatsisf+0x12>

000014a0 <__floatsisf>:
    14a0:	97 fb       	bst	r25, 7
    14a2:	3e f4       	brtc	.+14     	; 0x14b2 <__floatsisf+0x12>
    14a4:	90 95       	com	r25
    14a6:	80 95       	com	r24
    14a8:	70 95       	com	r23
    14aa:	61 95       	neg	r22
    14ac:	7f 4f       	sbci	r23, 0xFF	; 255
    14ae:	8f 4f       	sbci	r24, 0xFF	; 255
    14b0:	9f 4f       	sbci	r25, 0xFF	; 255
    14b2:	99 23       	and	r25, r25
    14b4:	a9 f0       	breq	.+42     	; 0x14e0 <__floatsisf+0x40>
    14b6:	f9 2f       	mov	r31, r25
    14b8:	96 e9       	ldi	r25, 0x96	; 150
    14ba:	bb 27       	eor	r27, r27
    14bc:	93 95       	inc	r25
    14be:	f6 95       	lsr	r31
    14c0:	87 95       	ror	r24
    14c2:	77 95       	ror	r23
    14c4:	67 95       	ror	r22
    14c6:	b7 95       	ror	r27
    14c8:	f1 11       	cpse	r31, r1
    14ca:	f8 cf       	rjmp	.-16     	; 0x14bc <__floatsisf+0x1c>
    14cc:	fa f4       	brpl	.+62     	; 0x150c <__floatsisf+0x6c>
    14ce:	bb 0f       	add	r27, r27
    14d0:	11 f4       	brne	.+4      	; 0x14d6 <__floatsisf+0x36>
    14d2:	60 ff       	sbrs	r22, 0
    14d4:	1b c0       	rjmp	.+54     	; 0x150c <__floatsisf+0x6c>
    14d6:	6f 5f       	subi	r22, 0xFF	; 255
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	8f 4f       	sbci	r24, 0xFF	; 255
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	16 c0       	rjmp	.+44     	; 0x150c <__floatsisf+0x6c>
    14e0:	88 23       	and	r24, r24
    14e2:	11 f0       	breq	.+4      	; 0x14e8 <__floatsisf+0x48>
    14e4:	96 e9       	ldi	r25, 0x96	; 150
    14e6:	11 c0       	rjmp	.+34     	; 0x150a <__floatsisf+0x6a>
    14e8:	77 23       	and	r23, r23
    14ea:	21 f0       	breq	.+8      	; 0x14f4 <__floatsisf+0x54>
    14ec:	9e e8       	ldi	r25, 0x8E	; 142
    14ee:	87 2f       	mov	r24, r23
    14f0:	76 2f       	mov	r23, r22
    14f2:	05 c0       	rjmp	.+10     	; 0x14fe <__floatsisf+0x5e>
    14f4:	66 23       	and	r22, r22
    14f6:	71 f0       	breq	.+28     	; 0x1514 <__floatsisf+0x74>
    14f8:	96 e8       	ldi	r25, 0x86	; 134
    14fa:	86 2f       	mov	r24, r22
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	2a f0       	brmi	.+10     	; 0x150c <__floatsisf+0x6c>
    1502:	9a 95       	dec	r25
    1504:	66 0f       	add	r22, r22
    1506:	77 1f       	adc	r23, r23
    1508:	88 1f       	adc	r24, r24
    150a:	da f7       	brpl	.-10     	; 0x1502 <__floatsisf+0x62>
    150c:	88 0f       	add	r24, r24
    150e:	96 95       	lsr	r25
    1510:	87 95       	ror	r24
    1512:	97 f9       	bld	r25, 7
    1514:	08 95       	ret

00001516 <__fp_cmp>:
    1516:	99 0f       	add	r25, r25
    1518:	00 08       	sbc	r0, r0
    151a:	55 0f       	add	r21, r21
    151c:	aa 0b       	sbc	r26, r26
    151e:	e0 e8       	ldi	r30, 0x80	; 128
    1520:	fe ef       	ldi	r31, 0xFE	; 254
    1522:	16 16       	cp	r1, r22
    1524:	17 06       	cpc	r1, r23
    1526:	e8 07       	cpc	r30, r24
    1528:	f9 07       	cpc	r31, r25
    152a:	c0 f0       	brcs	.+48     	; 0x155c <__fp_cmp+0x46>
    152c:	12 16       	cp	r1, r18
    152e:	13 06       	cpc	r1, r19
    1530:	e4 07       	cpc	r30, r20
    1532:	f5 07       	cpc	r31, r21
    1534:	98 f0       	brcs	.+38     	; 0x155c <__fp_cmp+0x46>
    1536:	62 1b       	sub	r22, r18
    1538:	73 0b       	sbc	r23, r19
    153a:	84 0b       	sbc	r24, r20
    153c:	95 0b       	sbc	r25, r21
    153e:	39 f4       	brne	.+14     	; 0x154e <__fp_cmp+0x38>
    1540:	0a 26       	eor	r0, r26
    1542:	61 f0       	breq	.+24     	; 0x155c <__fp_cmp+0x46>
    1544:	23 2b       	or	r18, r19
    1546:	24 2b       	or	r18, r20
    1548:	25 2b       	or	r18, r21
    154a:	21 f4       	brne	.+8      	; 0x1554 <__fp_cmp+0x3e>
    154c:	08 95       	ret
    154e:	0a 26       	eor	r0, r26
    1550:	09 f4       	brne	.+2      	; 0x1554 <__fp_cmp+0x3e>
    1552:	a1 40       	sbci	r26, 0x01	; 1
    1554:	a6 95       	lsr	r26
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	81 1d       	adc	r24, r1
    155a:	81 1d       	adc	r24, r1
    155c:	08 95       	ret

0000155e <__fp_inf>:
    155e:	97 f9       	bld	r25, 7
    1560:	9f 67       	ori	r25, 0x7F	; 127
    1562:	80 e8       	ldi	r24, 0x80	; 128
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	08 95       	ret

0000156a <__fp_nan>:
    156a:	9f ef       	ldi	r25, 0xFF	; 255
    156c:	80 ec       	ldi	r24, 0xC0	; 192
    156e:	08 95       	ret

00001570 <__fp_pscA>:
    1570:	00 24       	eor	r0, r0
    1572:	0a 94       	dec	r0
    1574:	16 16       	cp	r1, r22
    1576:	17 06       	cpc	r1, r23
    1578:	18 06       	cpc	r1, r24
    157a:	09 06       	cpc	r0, r25
    157c:	08 95       	ret

0000157e <__fp_pscB>:
    157e:	00 24       	eor	r0, r0
    1580:	0a 94       	dec	r0
    1582:	12 16       	cp	r1, r18
    1584:	13 06       	cpc	r1, r19
    1586:	14 06       	cpc	r1, r20
    1588:	05 06       	cpc	r0, r21
    158a:	08 95       	ret

0000158c <__fp_round>:
    158c:	09 2e       	mov	r0, r25
    158e:	03 94       	inc	r0
    1590:	00 0c       	add	r0, r0
    1592:	11 f4       	brne	.+4      	; 0x1598 <__fp_round+0xc>
    1594:	88 23       	and	r24, r24
    1596:	52 f0       	brmi	.+20     	; 0x15ac <__fp_round+0x20>
    1598:	bb 0f       	add	r27, r27
    159a:	40 f4       	brcc	.+16     	; 0x15ac <__fp_round+0x20>
    159c:	bf 2b       	or	r27, r31
    159e:	11 f4       	brne	.+4      	; 0x15a4 <__fp_round+0x18>
    15a0:	60 ff       	sbrs	r22, 0
    15a2:	04 c0       	rjmp	.+8      	; 0x15ac <__fp_round+0x20>
    15a4:	6f 5f       	subi	r22, 0xFF	; 255
    15a6:	7f 4f       	sbci	r23, 0xFF	; 255
    15a8:	8f 4f       	sbci	r24, 0xFF	; 255
    15aa:	9f 4f       	sbci	r25, 0xFF	; 255
    15ac:	08 95       	ret

000015ae <__fp_split3>:
    15ae:	57 fd       	sbrc	r21, 7
    15b0:	90 58       	subi	r25, 0x80	; 128
    15b2:	44 0f       	add	r20, r20
    15b4:	55 1f       	adc	r21, r21
    15b6:	59 f0       	breq	.+22     	; 0x15ce <__fp_splitA+0x10>
    15b8:	5f 3f       	cpi	r21, 0xFF	; 255
    15ba:	71 f0       	breq	.+28     	; 0x15d8 <__fp_splitA+0x1a>
    15bc:	47 95       	ror	r20

000015be <__fp_splitA>:
    15be:	88 0f       	add	r24, r24
    15c0:	97 fb       	bst	r25, 7
    15c2:	99 1f       	adc	r25, r25
    15c4:	61 f0       	breq	.+24     	; 0x15de <__fp_splitA+0x20>
    15c6:	9f 3f       	cpi	r25, 0xFF	; 255
    15c8:	79 f0       	breq	.+30     	; 0x15e8 <__fp_splitA+0x2a>
    15ca:	87 95       	ror	r24
    15cc:	08 95       	ret
    15ce:	12 16       	cp	r1, r18
    15d0:	13 06       	cpc	r1, r19
    15d2:	14 06       	cpc	r1, r20
    15d4:	55 1f       	adc	r21, r21
    15d6:	f2 cf       	rjmp	.-28     	; 0x15bc <__fp_split3+0xe>
    15d8:	46 95       	lsr	r20
    15da:	f1 df       	rcall	.-30     	; 0x15be <__fp_splitA>
    15dc:	08 c0       	rjmp	.+16     	; 0x15ee <__fp_splitA+0x30>
    15de:	16 16       	cp	r1, r22
    15e0:	17 06       	cpc	r1, r23
    15e2:	18 06       	cpc	r1, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	f1 cf       	rjmp	.-30     	; 0x15ca <__fp_splitA+0xc>
    15e8:	86 95       	lsr	r24
    15ea:	71 05       	cpc	r23, r1
    15ec:	61 05       	cpc	r22, r1
    15ee:	08 94       	sec
    15f0:	08 95       	ret

000015f2 <__fp_zero>:
    15f2:	e8 94       	clt

000015f4 <__fp_szero>:
    15f4:	bb 27       	eor	r27, r27
    15f6:	66 27       	eor	r22, r22
    15f8:	77 27       	eor	r23, r23
    15fa:	cb 01       	movw	r24, r22
    15fc:	97 f9       	bld	r25, 7
    15fe:	08 95       	ret

00001600 <__gesf2>:
    1600:	8a df       	rcall	.-236    	; 0x1516 <__fp_cmp>
    1602:	08 f4       	brcc	.+2      	; 0x1606 <__gesf2+0x6>
    1604:	8f ef       	ldi	r24, 0xFF	; 255
    1606:	08 95       	ret

00001608 <__mulsf3>:
    1608:	0b d0       	rcall	.+22     	; 0x1620 <__mulsf3x>
    160a:	c0 cf       	rjmp	.-128    	; 0x158c <__fp_round>
    160c:	b1 df       	rcall	.-158    	; 0x1570 <__fp_pscA>
    160e:	28 f0       	brcs	.+10     	; 0x161a <__mulsf3+0x12>
    1610:	b6 df       	rcall	.-148    	; 0x157e <__fp_pscB>
    1612:	18 f0       	brcs	.+6      	; 0x161a <__mulsf3+0x12>
    1614:	95 23       	and	r25, r21
    1616:	09 f0       	breq	.+2      	; 0x161a <__mulsf3+0x12>
    1618:	a2 cf       	rjmp	.-188    	; 0x155e <__fp_inf>
    161a:	a7 cf       	rjmp	.-178    	; 0x156a <__fp_nan>
    161c:	11 24       	eor	r1, r1
    161e:	ea cf       	rjmp	.-44     	; 0x15f4 <__fp_szero>

00001620 <__mulsf3x>:
    1620:	c6 df       	rcall	.-116    	; 0x15ae <__fp_split3>
    1622:	a0 f3       	brcs	.-24     	; 0x160c <__mulsf3+0x4>

00001624 <__mulsf3_pse>:
    1624:	95 9f       	mul	r25, r21
    1626:	d1 f3       	breq	.-12     	; 0x161c <__mulsf3+0x14>
    1628:	95 0f       	add	r25, r21
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	55 1f       	adc	r21, r21
    162e:	62 9f       	mul	r22, r18
    1630:	f0 01       	movw	r30, r0
    1632:	72 9f       	mul	r23, r18
    1634:	bb 27       	eor	r27, r27
    1636:	f0 0d       	add	r31, r0
    1638:	b1 1d       	adc	r27, r1
    163a:	63 9f       	mul	r22, r19
    163c:	aa 27       	eor	r26, r26
    163e:	f0 0d       	add	r31, r0
    1640:	b1 1d       	adc	r27, r1
    1642:	aa 1f       	adc	r26, r26
    1644:	64 9f       	mul	r22, r20
    1646:	66 27       	eor	r22, r22
    1648:	b0 0d       	add	r27, r0
    164a:	a1 1d       	adc	r26, r1
    164c:	66 1f       	adc	r22, r22
    164e:	82 9f       	mul	r24, r18
    1650:	22 27       	eor	r18, r18
    1652:	b0 0d       	add	r27, r0
    1654:	a1 1d       	adc	r26, r1
    1656:	62 1f       	adc	r22, r18
    1658:	73 9f       	mul	r23, r19
    165a:	b0 0d       	add	r27, r0
    165c:	a1 1d       	adc	r26, r1
    165e:	62 1f       	adc	r22, r18
    1660:	83 9f       	mul	r24, r19
    1662:	a0 0d       	add	r26, r0
    1664:	61 1d       	adc	r22, r1
    1666:	22 1f       	adc	r18, r18
    1668:	74 9f       	mul	r23, r20
    166a:	33 27       	eor	r19, r19
    166c:	a0 0d       	add	r26, r0
    166e:	61 1d       	adc	r22, r1
    1670:	23 1f       	adc	r18, r19
    1672:	84 9f       	mul	r24, r20
    1674:	60 0d       	add	r22, r0
    1676:	21 1d       	adc	r18, r1
    1678:	82 2f       	mov	r24, r18
    167a:	76 2f       	mov	r23, r22
    167c:	6a 2f       	mov	r22, r26
    167e:	11 24       	eor	r1, r1
    1680:	9f 57       	subi	r25, 0x7F	; 127
    1682:	50 40       	sbci	r21, 0x00	; 0
    1684:	8a f0       	brmi	.+34     	; 0x16a8 <__mulsf3_pse+0x84>
    1686:	e1 f0       	breq	.+56     	; 0x16c0 <__mulsf3_pse+0x9c>
    1688:	88 23       	and	r24, r24
    168a:	4a f0       	brmi	.+18     	; 0x169e <__mulsf3_pse+0x7a>
    168c:	ee 0f       	add	r30, r30
    168e:	ff 1f       	adc	r31, r31
    1690:	bb 1f       	adc	r27, r27
    1692:	66 1f       	adc	r22, r22
    1694:	77 1f       	adc	r23, r23
    1696:	88 1f       	adc	r24, r24
    1698:	91 50       	subi	r25, 0x01	; 1
    169a:	50 40       	sbci	r21, 0x00	; 0
    169c:	a9 f7       	brne	.-22     	; 0x1688 <__mulsf3_pse+0x64>
    169e:	9e 3f       	cpi	r25, 0xFE	; 254
    16a0:	51 05       	cpc	r21, r1
    16a2:	70 f0       	brcs	.+28     	; 0x16c0 <__mulsf3_pse+0x9c>
    16a4:	5c cf       	rjmp	.-328    	; 0x155e <__fp_inf>
    16a6:	a6 cf       	rjmp	.-180    	; 0x15f4 <__fp_szero>
    16a8:	5f 3f       	cpi	r21, 0xFF	; 255
    16aa:	ec f3       	brlt	.-6      	; 0x16a6 <__mulsf3_pse+0x82>
    16ac:	98 3e       	cpi	r25, 0xE8	; 232
    16ae:	dc f3       	brlt	.-10     	; 0x16a6 <__mulsf3_pse+0x82>
    16b0:	86 95       	lsr	r24
    16b2:	77 95       	ror	r23
    16b4:	67 95       	ror	r22
    16b6:	b7 95       	ror	r27
    16b8:	f7 95       	ror	r31
    16ba:	e7 95       	ror	r30
    16bc:	9f 5f       	subi	r25, 0xFF	; 255
    16be:	c1 f7       	brne	.-16     	; 0x16b0 <__mulsf3_pse+0x8c>
    16c0:	fe 2b       	or	r31, r30
    16c2:	88 0f       	add	r24, r24
    16c4:	91 1d       	adc	r25, r1
    16c6:	96 95       	lsr	r25
    16c8:	87 95       	ror	r24
    16ca:	97 f9       	bld	r25, 7
    16cc:	08 95       	ret

000016ce <__divmodhi4>:
    16ce:	97 fb       	bst	r25, 7
    16d0:	09 2e       	mov	r0, r25
    16d2:	07 26       	eor	r0, r23
    16d4:	0a d0       	rcall	.+20     	; 0x16ea <__divmodhi4_neg1>
    16d6:	77 fd       	sbrc	r23, 7
    16d8:	04 d0       	rcall	.+8      	; 0x16e2 <__divmodhi4_neg2>
    16da:	0c d0       	rcall	.+24     	; 0x16f4 <__udivmodhi4>
    16dc:	06 d0       	rcall	.+12     	; 0x16ea <__divmodhi4_neg1>
    16de:	00 20       	and	r0, r0
    16e0:	1a f4       	brpl	.+6      	; 0x16e8 <__divmodhi4_exit>

000016e2 <__divmodhi4_neg2>:
    16e2:	70 95       	com	r23
    16e4:	61 95       	neg	r22
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255

000016e8 <__divmodhi4_exit>:
    16e8:	08 95       	ret

000016ea <__divmodhi4_neg1>:
    16ea:	f6 f7       	brtc	.-4      	; 0x16e8 <__divmodhi4_exit>
    16ec:	90 95       	com	r25
    16ee:	81 95       	neg	r24
    16f0:	9f 4f       	sbci	r25, 0xFF	; 255
    16f2:	08 95       	ret

000016f4 <__udivmodhi4>:
    16f4:	aa 1b       	sub	r26, r26
    16f6:	bb 1b       	sub	r27, r27
    16f8:	51 e1       	ldi	r21, 0x11	; 17
    16fa:	07 c0       	rjmp	.+14     	; 0x170a <__udivmodhi4_ep>

000016fc <__udivmodhi4_loop>:
    16fc:	aa 1f       	adc	r26, r26
    16fe:	bb 1f       	adc	r27, r27
    1700:	a6 17       	cp	r26, r22
    1702:	b7 07       	cpc	r27, r23
    1704:	10 f0       	brcs	.+4      	; 0x170a <__udivmodhi4_ep>
    1706:	a6 1b       	sub	r26, r22
    1708:	b7 0b       	sbc	r27, r23

0000170a <__udivmodhi4_ep>:
    170a:	88 1f       	adc	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	5a 95       	dec	r21
    1710:	a9 f7       	brne	.-22     	; 0x16fc <__udivmodhi4_loop>
    1712:	80 95       	com	r24
    1714:	90 95       	com	r25
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	08 95       	ret

0000171c <do_rand>:
    171c:	8f 92       	push	r8
    171e:	9f 92       	push	r9
    1720:	af 92       	push	r10
    1722:	bf 92       	push	r11
    1724:	cf 92       	push	r12
    1726:	df 92       	push	r13
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	ec 01       	movw	r28, r24
    1732:	88 81       	ld	r24, Y
    1734:	99 81       	ldd	r25, Y+1	; 0x01
    1736:	aa 81       	ldd	r26, Y+2	; 0x02
    1738:	bb 81       	ldd	r27, Y+3	; 0x03
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	a1 05       	cpc	r26, r1
    173e:	b1 05       	cpc	r27, r1
    1740:	21 f4       	brne	.+8      	; 0x174a <do_rand+0x2e>
    1742:	84 e2       	ldi	r24, 0x24	; 36
    1744:	99 ed       	ldi	r25, 0xD9	; 217
    1746:	ab e5       	ldi	r26, 0x5B	; 91
    1748:	b7 e0       	ldi	r27, 0x07	; 7
    174a:	bc 01       	movw	r22, r24
    174c:	cd 01       	movw	r24, r26
    174e:	2d e1       	ldi	r18, 0x1D	; 29
    1750:	33 ef       	ldi	r19, 0xF3	; 243
    1752:	41 e0       	ldi	r20, 0x01	; 1
    1754:	50 e0       	ldi	r21, 0x00	; 0
    1756:	0e 94 12 0c 	call	0x1824	; 0x1824 <__divmodsi4>
    175a:	49 01       	movw	r8, r18
    175c:	5a 01       	movw	r10, r20
    175e:	27 ea       	ldi	r18, 0xA7	; 167
    1760:	31 e4       	ldi	r19, 0x41	; 65
    1762:	40 e0       	ldi	r20, 0x00	; 0
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsi3>
    176a:	6b 01       	movw	r12, r22
    176c:	7c 01       	movw	r14, r24
    176e:	c5 01       	movw	r24, r10
    1770:	b4 01       	movw	r22, r8
    1772:	2c ee       	ldi	r18, 0xEC	; 236
    1774:	34 ef       	ldi	r19, 0xF4	; 244
    1776:	4f ef       	ldi	r20, 0xFF	; 255
    1778:	5f ef       	ldi	r21, 0xFF	; 255
    177a:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsi3>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	c8 0e       	add	r12, r24
    1784:	d9 1e       	adc	r13, r25
    1786:	ea 1e       	adc	r14, r26
    1788:	fb 1e       	adc	r15, r27
    178a:	f7 fe       	sbrs	r15, 7
    178c:	08 c0       	rjmp	.+16     	; 0x179e <do_rand+0x82>
    178e:	8f ef       	ldi	r24, 0xFF	; 255
    1790:	9f ef       	ldi	r25, 0xFF	; 255
    1792:	af ef       	ldi	r26, 0xFF	; 255
    1794:	bf e7       	ldi	r27, 0x7F	; 127
    1796:	c8 0e       	add	r12, r24
    1798:	d9 1e       	adc	r13, r25
    179a:	ea 1e       	adc	r14, r26
    179c:	fb 1e       	adc	r15, r27
    179e:	c8 82       	st	Y, r12
    17a0:	d9 82       	std	Y+1, r13	; 0x01
    17a2:	ea 82       	std	Y+2, r14	; 0x02
    17a4:	fb 82       	std	Y+3, r15	; 0x03
    17a6:	c6 01       	movw	r24, r12
    17a8:	9f 77       	andi	r25, 0x7F	; 127
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	ff 90       	pop	r15
    17b0:	ef 90       	pop	r14
    17b2:	df 90       	pop	r13
    17b4:	cf 90       	pop	r12
    17b6:	bf 90       	pop	r11
    17b8:	af 90       	pop	r10
    17ba:	9f 90       	pop	r9
    17bc:	8f 90       	pop	r8
    17be:	08 95       	ret

000017c0 <rand_r>:
    17c0:	0e 94 8e 0b 	call	0x171c	; 0x171c <do_rand>
    17c4:	08 95       	ret

000017c6 <rand>:
    17c6:	86 ee       	ldi	r24, 0xE6	; 230
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 8e 0b 	call	0x171c	; 0x171c <do_rand>
    17ce:	08 95       	ret

000017d0 <srand>:
    17d0:	a0 e0       	ldi	r26, 0x00	; 0
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	80 93 e6 00 	sts	0x00E6, r24
    17d8:	90 93 e7 00 	sts	0x00E7, r25
    17dc:	a0 93 e8 00 	sts	0x00E8, r26
    17e0:	b0 93 e9 00 	sts	0x00E9, r27
    17e4:	08 95       	ret

000017e6 <__mulsi3>:
    17e6:	62 9f       	mul	r22, r18
    17e8:	d0 01       	movw	r26, r0
    17ea:	73 9f       	mul	r23, r19
    17ec:	f0 01       	movw	r30, r0
    17ee:	82 9f       	mul	r24, r18
    17f0:	e0 0d       	add	r30, r0
    17f2:	f1 1d       	adc	r31, r1
    17f4:	64 9f       	mul	r22, r20
    17f6:	e0 0d       	add	r30, r0
    17f8:	f1 1d       	adc	r31, r1
    17fa:	92 9f       	mul	r25, r18
    17fc:	f0 0d       	add	r31, r0
    17fe:	83 9f       	mul	r24, r19
    1800:	f0 0d       	add	r31, r0
    1802:	74 9f       	mul	r23, r20
    1804:	f0 0d       	add	r31, r0
    1806:	65 9f       	mul	r22, r21
    1808:	f0 0d       	add	r31, r0
    180a:	99 27       	eor	r25, r25
    180c:	72 9f       	mul	r23, r18
    180e:	b0 0d       	add	r27, r0
    1810:	e1 1d       	adc	r30, r1
    1812:	f9 1f       	adc	r31, r25
    1814:	63 9f       	mul	r22, r19
    1816:	b0 0d       	add	r27, r0
    1818:	e1 1d       	adc	r30, r1
    181a:	f9 1f       	adc	r31, r25
    181c:	bd 01       	movw	r22, r26
    181e:	cf 01       	movw	r24, r30
    1820:	11 24       	eor	r1, r1
    1822:	08 95       	ret

00001824 <__divmodsi4>:
    1824:	97 fb       	bst	r25, 7
    1826:	09 2e       	mov	r0, r25
    1828:	05 26       	eor	r0, r21
    182a:	0e d0       	rcall	.+28     	; 0x1848 <__divmodsi4_neg1>
    182c:	57 fd       	sbrc	r21, 7
    182e:	04 d0       	rcall	.+8      	; 0x1838 <__divmodsi4_neg2>
    1830:	14 d0       	rcall	.+40     	; 0x185a <__udivmodsi4>
    1832:	0a d0       	rcall	.+20     	; 0x1848 <__divmodsi4_neg1>
    1834:	00 1c       	adc	r0, r0
    1836:	38 f4       	brcc	.+14     	; 0x1846 <__divmodsi4_exit>

00001838 <__divmodsi4_neg2>:
    1838:	50 95       	com	r21
    183a:	40 95       	com	r20
    183c:	30 95       	com	r19
    183e:	21 95       	neg	r18
    1840:	3f 4f       	sbci	r19, 0xFF	; 255
    1842:	4f 4f       	sbci	r20, 0xFF	; 255
    1844:	5f 4f       	sbci	r21, 0xFF	; 255

00001846 <__divmodsi4_exit>:
    1846:	08 95       	ret

00001848 <__divmodsi4_neg1>:
    1848:	f6 f7       	brtc	.-4      	; 0x1846 <__divmodsi4_exit>
    184a:	90 95       	com	r25
    184c:	80 95       	com	r24
    184e:	70 95       	com	r23
    1850:	61 95       	neg	r22
    1852:	7f 4f       	sbci	r23, 0xFF	; 255
    1854:	8f 4f       	sbci	r24, 0xFF	; 255
    1856:	9f 4f       	sbci	r25, 0xFF	; 255
    1858:	08 95       	ret

0000185a <__udivmodsi4>:
    185a:	a1 e2       	ldi	r26, 0x21	; 33
    185c:	1a 2e       	mov	r1, r26
    185e:	aa 1b       	sub	r26, r26
    1860:	bb 1b       	sub	r27, r27
    1862:	fd 01       	movw	r30, r26
    1864:	0d c0       	rjmp	.+26     	; 0x1880 <__udivmodsi4_ep>

00001866 <__udivmodsi4_loop>:
    1866:	aa 1f       	adc	r26, r26
    1868:	bb 1f       	adc	r27, r27
    186a:	ee 1f       	adc	r30, r30
    186c:	ff 1f       	adc	r31, r31
    186e:	a2 17       	cp	r26, r18
    1870:	b3 07       	cpc	r27, r19
    1872:	e4 07       	cpc	r30, r20
    1874:	f5 07       	cpc	r31, r21
    1876:	20 f0       	brcs	.+8      	; 0x1880 <__udivmodsi4_ep>
    1878:	a2 1b       	sub	r26, r18
    187a:	b3 0b       	sbc	r27, r19
    187c:	e4 0b       	sbc	r30, r20
    187e:	f5 0b       	sbc	r31, r21

00001880 <__udivmodsi4_ep>:
    1880:	66 1f       	adc	r22, r22
    1882:	77 1f       	adc	r23, r23
    1884:	88 1f       	adc	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	1a 94       	dec	r1
    188a:	69 f7       	brne	.-38     	; 0x1866 <__udivmodsi4_loop>
    188c:	60 95       	com	r22
    188e:	70 95       	com	r23
    1890:	80 95       	com	r24
    1892:	90 95       	com	r25
    1894:	9b 01       	movw	r18, r22
    1896:	ac 01       	movw	r20, r24
    1898:	bd 01       	movw	r22, r26
    189a:	cf 01       	movw	r24, r30
    189c:	08 95       	ret

0000189e <_exit>:
    189e:	f8 94       	cli

000018a0 <__stop_program>:
    18a0:	ff cf       	rjmp	.-2      	; 0x18a0 <__stop_program>
